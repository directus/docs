openapi: 3.0.1
info:
  title: Directus API Reference
  description: This is a dynamically generated API specification for all endpoints existing on the current project!
  version: 11.1.0
  license:
    name: Business Source License 1.1 (BUSL-1.1)
    url: https://github.com/directus/directus/blob/main/license
servers:
  - url: https://example.directus.app
    description: Your current Directus project.
security: []
tags:
  - name: Activity
    description: All events that happen within Directus are tracked and stored in the activities collection. This gives you full accountability over everything that happens.
    x-collection: directus_activity
  - name: Assets
    description: Image typed files can be dynamically resized and transformed to fit any need.
  - name: Authentication
    description: All data within the platform is private by default. The public role can be configured to expose data without authentication, or you can pass an access token to the API to access private data.
  - name: Collections
    description: Collections are the individual collections of items, similar to tables in a database. Changes to collections will alter the schema of the database.
    x-collection: directus_collections
  - name: Comments
    description: Comments are a collaboration tool and can be left on items from the sidebar.
    x-collection: directus_comments
  - name: Dashboards
    description: Dashboards within the Insights module organize different Panels into an at-a-glance view. They can be used to group data based on department, objective, business process or anything you choose.
  - name: Extensions
    description: Directus can easily be extended through the addition of several types of extensions, including layouts, interfaces, and modules.
    x-collection: directus_extensions
  - name: Fields
    description: Fields are individual pieces of content within an item. They are mapped to columns in the database.
    x-collection: directus_fields
  - name: Files
    description: Every file managed by the platform is uploaded to the configured storage adapter, and its associated metadata is tracked within the `directus_files` system collection. Any requested file transformations are handled on the fly, and are only saved to storage.
    x-collection: directus_files
  - name: Folders
    description: Folders can be used to organize files within the platform. Folders are virtual, and aren't mirrored within the storage adapter.
    x-collection: directus_folders
  - name: Flows
    description: Flows enable custom, event-driven data processing and task automation.
    x-collection: directus_flows
  - name: Items
    description: Items are individual pieces of data in your database. They can be anything, from articles, to IoT status checks.
    x-collection: directus_items
  - name: Operations
    description: Operations are the building blocks within Data Flows.
    x-collection: directus_operations
  - name: Notifications
    description: Notifications allow you to send/receive messages to/from other users of the platform.
    x-collection: directus_notifications
  - name: Panels
    description: Panels are modular units of data visualization that exist within the Insights module. Each panel exists within a Dashboard and can be positioned and resized as needed.
    x-collection: directus_panels
  - name: Permissions
    description: Permissions are assigned to Policies, and control data access throughout the platform. [Learn more about permissions](/guides/auth/access-control).
    x-collection: directus_permissions
  - name: Policies
    description: Policies define a specific set of access permissions, and are a composable unit that can be assigned to both roles and users.
    x-collection: directus_policies
  - name: Presets
    description: Presets hold the preferences of individual users of the platform. This allows Directus to show and maintain custom item listings for users of the app.
    x-collection: directus_presets
  - name: Relations
    description: What data is linked to what other data. Allows you to assign authors to articles, products to sales, and whatever other structures you can think of.
    x-collection: directus_relations
  - name: Revisions
    description: Revisions are individual changes to items made. Directus keeps track of changes made, so you're able to revert to a previous state at will.
    x-collection: directus_revisions
  - name: Roles
    description: Roles are the primary organizational structure for users within the platform.
    x-collection: directus_roles
  - name: Schema
    description: Retrieve and update the schema of an instance.
    x-authentication: admin
    x-schemas:
      - Schema
      - Diff
  - name: Shares
    description: Shares are a way to publicly share an otherwise private item.
    x-collection: directus_shares
  - name: Settings
    description: Settings are key-value pairs that are stored in the database, and control different aspects of the project. Only administrators have access to manage Settings.
    x-collection: directus_settings
  - name: Server
    description: Access to where Directus runs. Allows you to make sure your server has everything needed to run the platform, and check what kind of latency we're dealing with.
  - name: Translations
    description: Custom translations in Directus.
    x-collection: directus_translations
  - name: Utilities
    description: Directus comes with various utility endpoints you can use to simplify your development flow.
    x-authentication: user
    x-schemas:
      - Files
      - Folders
      - Users
      - Roles
  - name: Users
    description: Directus Users are the individual accounts that let you authenticate into the API and App. Each user can belong to a Role.
    x-collection: directus_users
  - name: Versions
    description: Enables users to create unpublished copies of an item, modify them independently from the main version, and promote them to become the new main version when ready.
    x-collection: directus_versions
paths:
  /activity:
    get:
      summary: List Activity Actions
      operationId: getActivities
      description: Returns a list of activity actions.
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Activity'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
          description: Successful request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Activity
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readActivities } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readActivities(query_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Query {\n\tactivity: [directus_activity]\n}\n"
  /activity/{id}:
    get:
      summary: Retrieve an Activity Action
      description: Retrieves the details of an existing activity action.
      operationId: getActivity
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Activity'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Activity
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readActivity } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readActivity(activity_id, query_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Query {\n\tactivity_by_id(id: ID!): directus_activity\n}\n"
  /assets/{id}:
    get:
      summary: Get an Asset
      security: []
      tags:
        - Assets
      operationId: getAsset
      description: Image typed files can be retrieved, dynamically resized and transformed to fit any need.
      parameters:
        - name: id
          in: path
          description: The id of the file.
          required: true
          schema:
            type: string
        - name: key
          in: query
          description: The key of the asset size configured in settings.
          schema:
            type: string
        - name: transforms
          in: query
          description: A JSON array of image transformations.
          schema:
            type: string
        - name: download
          in: query
          description: Download the asset to your computer
          schema:
            type: boolean
      responses:
        '200':
          description: Successful request
          content:
            text/plain:
              schema:
                type: string
        '404':
          $ref: '#/components/responses/NotFoundError'
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readAssetRaw } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readAssetRaw('<file-id>', { key: '<key>' }));
        - label: GraphQL
          lang: GraphQL
          source: Not available in Directus SDK/GraphQL
  /auth/login:
    post:
      summary: Login
      description: Authenticate as a user.
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: admin@example.com
                  description: Email address of the user you're logging in as. for.
                password:
                  type: string
                  description: Password of the user.
                  format: password
                  example: password
                mode:
                  type: string
                  enum:
                    - json
                    - cookie
                    - session
                  default: json
                  description: Whether to retrieve the refresh token in the JSON response, or in a `httpOnly` cookie.
                otp:
                  type: string
                  description: The user's one-time-password (if MFA is enabled).
      responses:
        '200':
          description: Successful authentification
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: eyJhbGciOiJI...
                      expires:
                        type: integer
                        example: 900
                      refresh_token:
                        type: string
                        example: yuOJkjdPXMd...
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Authentication
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, authentication, rest, login } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(authentication('json')).with(rest());

            // login using the authentication composable
            const result = await client.login({ email, password });

            // login http request
            const result = await client.request(login({ email, password }));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\nmutation {\n\tauth_login(email: \"user_email\", password: \"user_password\") {\n\t\taccess_token\n\t\trefresh_token\n\t}\n}\n"
  /auth/logout:
    post:
      summary: Logout
      description: Invalidate the refresh token thus destroying the user's session.
      operationId: logout
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  example: eyJ0eXAiOiJKV...
                  description: The refresh token to invalidate. If you have the refresh token in a cookie through /auth/login, you don't have to submit it here.
                mode:
                  type: string
                  enum:
                    - json
                    - cookie
                    - session
                  description: Whether the refresh token is submitted in the JSON response, or in a `httpOnly` cookie.
      responses:
        '204':
          description: Successful request, empty body
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: {}
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Authentication
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, authentication, rest, logout } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(authentication()).with(rest());

            // logout using the authentication composable
            const result = await client.logout();

            // logout http request
            const result = await client.request(logout({ refresh_token }));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\nmutation {\n\tauth_logout(refresh_token: \"refresh_token\")\n}\n"
  /auth/oauth:
    get:
      summary: List Auth Providers
      security: []
      tags:
        - Authentication
      operationId: oauth
      description: List all the configured auth providers.
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  public:
                    type: boolean
                  data:
                    type: array
                    example:
                      - github
                      - facebook
                    items:
                      type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readProviders } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readProviders());
        - label: GraphQL
          lang: GraphQL
          source: Not available in GraphQL
  /auth/oauth/{provider}:
    get:
      summary: Login Using an OAuth Provider
      description: Start OAuth flow using the specified provider.
      operationId: oauthProvider
      parameters:
        - name: provider
          in: path
          description: Key of the activated OAuth provider.
          required: true
          schema:
            type: string
        - name: redirect
          in: query
          required: false
          description: Where to redirect on successful login.<br/>If set the authentication details are set inside cookies otherwise a JSON is returned.
          schema:
            type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  public:
                    type: boolean
                  data:
                    type: object
                    properties:
                      token:
                        type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security: []
      tags:
        - Authentication
  /auth/password/request:
    post:
      summary: Request a Password Reset
      operationId: passwordRequest
      description: Request a reset password email to be sent.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: admin@example.com
                  description: Email address of the user you're requesting a reset for.
                reset_url:
                  type: string
                  description: Provide a custom reset url which the link in the email will lead to. The reset token will be passed as a parameter. You need to configure the `PASSWORD_RESET_URL_ALLOW_LIST` environment variable to enable this feature.
      responses:
        '204':
          description: Successful request, empty body
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: {}
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Authentication
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, passwordRequest } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(passwordRequest(user_email));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\nmutation {\n\tauth_password_request(email: \"user_email\")\n}\n"
  /auth/password/reset:
    post:
      summary: Reset a Password
      operationId: passwordReset
      description: The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - password
              properties:
                token:
                  type: string
                  example: eyJ0eXAiOiJKV1Qi...
                  description: One-time use JWT token that is used to verify the user, as provided in the email sent by the request endpoint.
                password:
                  type: string
                  example: password
                  format: password
                  description: New password for the user.
      responses:
        '204':
          description: Successful request, empty body
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: {}
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Authentication
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, passwordReset } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(passwordReset(reset_token, new_password));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\nmutation {\n\tauth_password_reset(token: \"password_reset_token\", password: \"password\")\n}\n"
  /auth/refresh:
    post:
      summary: Refresh Token
      description: Retrieve a new access token using a refresh token.
      security: []
      tags:
        - Authentication
      operationId: refresh
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  example: eyJ0eXAiOiJKV...
                  description: JWT access token you want to refresh. This token can't be expired.
                mode:
                  type: string
                  enum:
                    - json
                    - cookie
                    - session
                  default: json
                  description: Whether to submit and retrieve the refresh token in the JSON response, or in a `httpOnly` cookie.
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: eyJhbGciOiJI...
                      expires:
                        type: integer
                        example: 900
                      refresh_token:
                        type: string
                        example: Gy-caJMpmGTA...
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, authentication, rest, refresh } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(authentication()).with(rest());

            // refresh using the authentication composable
            const result = await client.refresh();

            // refresh http request using a cookie
            const result = await client.request(refresh({ mode: 'cookie' }));

            // refresh http request using json
            const result = await client.request(refresh({ mode: 'json', refresh_token }));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\nmutation {\n\tauth_refresh(refresh_token: \"refresh_token\", mode: refresh_mode) {\n\t\taccess_token\n\t\trefresh_token\n\t}\n}\n"
  /collections:
    get:
      summary: List Collections
      description: Returns a list of the collections available in the project.
      operationId: getCollections
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Meta'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Collections'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Collections
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readCollections } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readCollections());
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Query {\n\tcollections: [directus_collections]\n}\n"
    post:
      summary: Create a Collection
      description: |
        Create a new collection in Directus.

        The `collection` and `schema` properties are required. To create a collection folder that doesn't have an underlying table, you can set `schema` to `null`.

        You are able to provide an array of `fields` to be created during the creation of the collection. See the fields object for more information on what properties are available in a field.
      operationId: createCollection
      parameters:
        - $ref: '#/components/parameters/Meta'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - collection
                - fields
              properties:
                collection:
                  type: string
                  description: Unique name of the collection.
                  example: my_collection
                fields:
                  type: array
                  description: The fields contained in this collection. See the fields reference for more information. Each individual field requires field, type, and interface to be provided.
                  items:
                    type: object
                icon:
                  type: string
                  description: Name of a Google Material Design Icon that's assigned to this collection.
                  example: people
                  nullable: true
                note:
                  type: string
                  description: A note describing the collection.
                  example: null
                  nullable: true
                display_template:
                  type: string
                  description: Text representation of how items from this collection are shown across the system.
                  example: null
                  nullable: true
                hidden:
                  type: boolean
                  description: Whether or not the collection is hidden from the navigation in the admin app.
                  example: false
                singleton:
                  type: boolean
                  description: Whether or not the collection is treated as a single object.
                  example: false
                translation:
                  type: string
                  description: Key value pairs of how to show this collection's name in different languages in the admin app.
                  example: null
                  nullable: true
                versioning:
                  type: boolean
                  description: Whether or not Content Versioning is enabled for this collection.
                  example: false
                archive_field:
                  type: string
                  description: What field holds the archive value.
                  example: null
                  nullable: true
                archive_app_filter:
                  type: string
                  description: What value to use for "archived" items.
                  example: null
                  nullable: true
                archive_value:
                  type: string
                  description: What value to use to "unarchive" items.
                  example: null
                  nullable: true
                unarchive_value:
                  type: string
                  description: Whether or not to show the "archived" filter.
                  example: null
                  nullable: true
                sort_field:
                  type: string
                  description: The sort field in the collection.
                  example: null
                  nullable: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Collections'
          description: Successful request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Collections
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: "import { createDirectus, rest, createCollection } from '@directus/sdk';\n\nconst client = createDirectus('directus_project_url').with(rest());\n\nconst result = await client.request(\n\tcreateCollection(collection_object)\n);\n"
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tcreate_collections_item(data: directus_collections): directus_collections\n}\n"
  /collections/{id}:
    get:
      summary: Retrieve a Collection
      description: Retrieves the details of a single collection.
      operationId: getCollection
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the collection.
          schema:
            type: string
        - $ref: '#/components/parameters/Meta'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Collections'
          description: Successful request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Collections
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readCollection } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readCollection(collection_name));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Query {\n\tcollections_by_name(name: String!): directus_collections\n}\n"
    patch:
      summary: Update a Collection
      description: |
        Update the metadata for an existing collection.

        You can only update the `meta` values of the collection object. Updating the collection name is not supported at this time.
      operationId: updateCollection
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the collection.
          schema:
            type: string
        - $ref: '#/components/parameters/Meta'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                meta:
                  type: object
                  description: Metadata of the collection.
                  properties:
                    icon:
                      type: string
                      description: Name of a Google Material Design Icon that's assigned to this collection.
                      example: people
                      nullable: true
                    color:
                      type: string
                      description: Choose the color for the icon assigned to this collection.
                      example: '#6644ff'
                      nullable: true
                    note:
                      type: string
                      description: A note describing the collection.
                      example: null
                      nullable: true
                    display_template:
                      type: string
                      description: Text representation of how items from this collection are shown across the system.
                      example: null
                      nullable: true
                    hidden:
                      type: boolean
                      description: Whether or not the collection is hidden from the navigation in the admin app.
                      example: false
                    singleton:
                      type: boolean
                      description: Whether or not the collection is treated as a single object.
                      example: false
                    translation:
                      type: string
                      description: Key value pairs of how to show this collection's name in different languages in the admin app.
                      example: null
                      nullable: true
                    versioning:
                      type: boolean
                      description: Whether or not Content Versioning is enabled for this collection.
                      example: false
                    archive_field:
                      type: string
                      description: What field holds the archive value.
                      example: null
                      nullable: true
                    archive_app_filter:
                      type: string
                      description: What value to use for "archived" items.
                      example: null
                      nullable: true
                    archive_value:
                      type: string
                      description: What value to use to "unarchive" items.
                      example: null
                      nullable: true
                    unarchive_value:
                      type: string
                      description: Whether or not to show the "archived" filter.
                      example: null
                      nullable: true
                    sort_field:
                      type: string
                      description: The sort field in the collection.
                      example: null
                      nullable: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Collections'
          description: Successful request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Collections
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateCollection } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateCollection(collection_name, partial_collection_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tupdate_collections_item(collection: String!, data: update_directus_collections_input!): directus_collections\n}\n"
    delete:
      summary: Delete a Collection
      description: 'Delete an existing collection. Warning: This will delete the whole collection, including the items within. Proceed with caution.'
      operationId: deleteCollection
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Collections
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the collection.
          schema:
            type: string
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deleteCollection } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deleteCollection(collection_name));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tdelete_collections_item(collection: String!): delete_collection\n}\n"
  /comments:
    get:
      summary: Get Comments
      description: Returns a list of comments.
      operationId: getComments
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comments'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
          description: Successful request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Comments
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readComments } from '@directus/sdk';

            const client = createDirectus('directus_comment_example').with(rest());

            const result = await client.request(readComments(query));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Query {
              flows: [directus_comments]
            }
    post:
      summary: Create Multiple comments
      description: Create multiple new comments.
      operationId: createComments
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/Comments'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comments'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Comments
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, createComments } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(createComments(comments_object_array));
        - label: GraphQL
          lang: GraphQL
          source: |
            POST /graphql/system

            type Mutation {
              create_comments_items(data: [create_directus_comments_input!]!): [directus_comments]
            }
    patch:
      summary: Update Multiple comments
      description: Update multiple existing comments.
      operationId: updateComments
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/Comments'
                keys:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comments'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Comments
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateComments } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateComments(comments_id_array, partial_comment_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            POST /graphql/system

            type Mutation {
              update_comments_items(ids: [ID!]!, data: update_directus_comments_input): [directus_comments]
            }
    delete:
      summary: Delete Multiple Comments
      description: Delete multiple existing Comments.
      operationId: deleteComments
      requestBody:
        description: An array of comment primary keys.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Comments
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deleteComments } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deleteComments(comment_id_array));
        - label: GraphQL
          lang: GraphQL
          source: |
            POST /graphql/system

            type Mutation {
              delete_Comments_items(ids: [ID!]!): delete_many
            }
  /comments/{id}:
    get:
      summary: Get Comment by ID
      description: Returns a single comment by primary key.
      operationId: getComment
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Comments'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Comments
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readComment } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readComment(comment_id, query_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Query {
              comment_by_id(id: ID!): directus_comments
            }
    patch:
      summary: Update a Comment
      description: Update the content of an existing comment.
      operationId: updateComment
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/Meta'
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/Comments'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Activity'
          description: Successful request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Comments
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateComment } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateComment(comment_id, partial_comment_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            POST /graphql/system

            type Mutation {
              update_comments_item(id: ID!, data: update_directus_comments_input): directus_comments
            }
    delete:
      summary: Delete a Comment
      description: Delete an existing comment. Deleted comments can not be retrieved.
      operationId: deleteComment
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Comments
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deleteComment } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deleteComment(comment_id));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tdelete_comment(id: ID): delete_one\n}\n"
  /dashboards:
    get:
      summary: List Dashboards
      description: List all dashboards that exist in Directus.
      operationId: getDashboards
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Page'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dashboards'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Dashboards
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, (readDashboards } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readDashboards(query_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Query {
              dashboards: [directus_dashboards]
            }
    post:
      summary: Create Multiple Dashboards
      description: Create multiple new dashboards.
      operationId: createDashboards
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/Dashboards'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dashboards'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Dashboards
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, createDashboards } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(createDashboards(dashboard_object_array));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              create_dashboards_items(data: [create_directus_dashboards_input!]!): [directus_dashboards]
            }
    patch:
      summary: Update Multiple Dashboards
      description: Update multiple dashboards at the same time.
      operationId: updateDashboards
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - data
                - keys
              properties:
                data:
                  $ref: '#/components/schemas/Dashboards'
                keys:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dashboards'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Dashboards
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateDashboards } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateDashboards(dashboard_id_array, partial_dashboard_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              update_dashboards_items(ids: [ID!]!, data: update_directus_dashboards_input): [directus_dashboards]
            }
    delete:
      summary: Delete Multiple Dashboards
      description: Delete multiple existing dashboards.
      operationId: deleteDashboards
      requestBody:
        description: An array of dashboard primary keys.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Dashboards
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deleteDashboards } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deleteDashboards(dashboard_id_array));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              delete_dashboards_items(ids: [ID!]!): delete_many
            }
  /dashboards/{id}:
    get:
      summary: Retrieve a Dashboard
      description: List an existing dashboard by primary key.
      operationId: getDashboard
      parameters:
        - name: id
          in: path
          description: Unique identifier of the Dashboard.
          schema:
            type: string
          required: true
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Dashboards'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Dashboards
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readDashboard } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readDashboard(dashboard_id, query_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Query {
              dashboards_by_id(id: ID!): directus_dashboards
            }
    patch:
      summary: Update a Dashboard
      description: Update an existing dashboard.
      operationId: updateDashboard
      parameters:
        - name: id
          in: path
          description: Unique identifier of the dashboard.
          schema:
            type: string
          required: true
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/Dashboards'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Dashboards'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Dashboards
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateDashboard } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateDashboard(dashboard_id, partial_dashboard_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              update_dashboards_item(id: ID!, data: update_directus_dashboards_input): directus_dashboards
            }
    delete:
      summary: Delete a Dashboard
      description: Delete an existing dashboard.
      operationId: deleteDashboard
      parameters:
        - name: id
          in: path
          description: Unique identifier of the dashboard.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Dashboards
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deleteDashboard } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deleteDashboard(dashboard_id));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              delete_dashboards_item(id: ID!): delete_one
            }
  /extensions:
    get:
      summary: List Extensions
      description: List the installed extensions and their configuration in the project.
      operationId: listExtensions
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Extensions'
          description: Successful request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security: []
      tags:
        - Extensions
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readExtensions } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readExtensions());
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Query {\n\textensions: [extension]\n}\n"
  /extensions/{bundle}/{name}:
    patch:
      summary: Update an Extension Bundle
      description: Update an existing extension bundle.
      operationId: updateExtensionBundle
      parameters:
        - in: path
          name: bundle
          required: true
          schema:
            type: string
        - in: path
          name: name
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                meta:
                  type: object
                  description: Directus metadata for the extension. Where the configuration for the extension in the current project is stored.
                  properties:
                    enabled:
                      type: boolean
                      description: Whether or not the extension is enabled.
                      example: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Extensions'
          description: Successful request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Extensions
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateExtension } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateExtension(bundle, name, partial_extension_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              update_extensions_item(bundle: String, name: String!, data: update_directus_extensions_input!): directus_extensions
            }
  /extensions/{name}:
    patch:
      summary: Update an Extension
      description: Update an existing extension.
      operationId: updateExtensions
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                meta:
                  type: object
                  description: Directus metadata for the extension. Where the configuration for the extension in the current project is stored.
                  properties:
                    enabled:
                      type: boolean
                      description: Whether or not the extension is enabled.
                      example: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Extensions'
          description: Successful request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Extensions
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateExtension } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateExtension(bundle, name, partial_extension_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tupdate_extensions_item(bundle: String, name: String!, data: update_directus_extensions_input!): directus_extensions\n}\n"
  /fields:
    get:
      summary: List All Fields
      description: Returns a list of the fields available in the project.
      operationId: getFields
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Fields'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Fields
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readFields } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readFields());
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Query {\n\tfields: [directus_fields]\n}\n"
  /fields/{collection}:
    get:
      summary: List Fields in Collection
      description: Returns a list of the fields available in the given collection.
      operationId: getCollectionFields
      parameters:
        - description: Unique identifier of the collection the item resides in.
          in: path
          name: collection
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Fields'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Fields
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readFieldsByCollection } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readFieldsByCollection(collection_name));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Query {\n\tfields_in_collection(collection: String!): directus_fields\n}\n"
    post:
      summary: Create Field in Collection
      description: Create a new field in a given collection.
      operationId: createField
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - field
                - datatype
                - type
                - length
              properties:
                type:
                  description: Directus specific data type. Used to cast values in the API.
                  example: integer
                  type: string
                field:
                  type: string
                  description: Unique name of the field. Field name is unique within the collection.
                  example: id
                schema:
                  type: object
                  description: The schema info.
                  properties:
                    type:
                      description: The type of the field.
                      example: string
                      type: string
                    name:
                      type: string
                      description: The name of the field.
                      example: title
                    table:
                      type: string
                      description: The collection of the field.
                      example: posts
                    default_value:
                      type: string
                      description: The default value of the field.
                      example: null
                      nullable: true
                    max_length:
                      type: integer
                      description: The max length of the field.
                      example: null
                      nullable: true
                    is_nullable:
                      type: boolean
                      description: If the field is nullable.
                      example: false
                    is_primary_key:
                      type: boolean
                      description: If the field is primary key.
                      example: false
                    has_auto_increment:
                      type: boolean
                      description: If the field has auto increment.
                      example: false
                    foreign_key_column:
                      type: string
                      description: Related column from the foreign key constraint.
                      example: null
                      nullable: true
                    foreign_key_table:
                      type: string
                      description: Related table from the foreign key constraint.
                      example: null
                      nullable: true
                    comment:
                      type: string
                      description: Comment as saved in the database.
                      example: null
                      nullable: true
                    schema:
                      type: string
                      description: Database schema (pg only).
                      example: public
                    foreign_key_schema:
                      type: string
                      description: Related schema from the foreign key constraint (pg only).
                      example: null
                      nullable: true
                meta:
                  type: object
                  description: The meta info.
                  nullable: true
                  properties:
                    id:
                      type: integer
                      description: Unique identifier for the field in the `directus_fields` collection.
                      example: 3
                    collection:
                      type: string
                      description: Unique name of the collection this field is in.
                      example: posts
                    field:
                      type: string
                      description: Unique name of the field. Field name is unique within the collection.
                      example: title
                    special:
                      type: array
                      description: Transformation flag for field
                      example: null
                      items:
                        type: string
                      nullable: true
                    system-interface:
                      type: string
                      description: What interface is used in the admin app to edit the value for this field.
                      example: primary-key
                      nullable: true
                    options:
                      type: object
                      description: Options for the interface that's used. This format is based on the individual interface.
                      example: null
                      nullable: true
                    display:
                      type: string
                      description: What display is used in the admin app to display the value for this field.
                      example: null
                      nullable: true
                    display_options:
                      type: object
                      description: Options for the display that's used. This format is based on the individual display.
                      example: null
                      nullable: true
                    locked:
                      type: boolean
                      description: If the field can be altered by the end user. Directus system fields have this value set to `true`.
                      example: true
                    readonly:
                      type: boolean
                      description: Prevents the user from editing the value in the field.
                      example: false
                    hidden:
                      type: boolean
                      description: If this field should be hidden.
                      example: true
                    sort:
                      type: integer
                      description: Sort order of this field on the edit page of the admin app.
                      example: 1
                      nullable: true
                    width:
                      type: string
                      description: Width of the field on the edit form.
                      example: null
                      nullable: true
                      enum:
                        - half
                        - half-left
                        - half-right
                        - full
                        - fill
                        - null
                    group:
                      type: integer
                      description: What field group this field is part of.
                      example: null
                      nullable: true
                    translation:
                      type: object
                      description: 'Key value pair of `<language>: <translation>` that allows the user to change the displayed name of the field in the admin app.'
                      example: null
                      nullable: true
                    note:
                      type: string
                      description: A user provided note for the field. Will be rendered alongside the interface on the edit page.
                      example: ''
                      nullable: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Fields'
          description: Successful request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Fields
      parameters:
        - description: Unique identifier of the collection the item resides in.
          in: path
          name: collection
          required: true
          schema:
            type: string
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: "import { createDirectus, rest, createField } from '@directus/sdk';\n\nconst client = createDirectus('directus_project_url').with(rest());\n\nconst result = await client.request(\n\tcreateField(collection_name, {\n\t\tfield: field_name,\n\t\ttype: field_type,\n\t\tfield_field: value,\n\t})\n);\n"
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tcreate_fields_item(collection: String!, data: create_directus_fields_input!): directus_fields\n}\n"
  /fields/{collection}/{id}:
    get:
      summary: Retrieve a Field
      description: Retrieves the details of a single field in a given collection.
      operationId: getCollectionField
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Fields'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Fields
      parameters:
        - name: collection
          in: path
          description: Unique identifier of the collection the item resides in.
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: Unique identifier of the field.
          schema:
            type: string
          required: true
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readField } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readField(collection_name, field_name));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Query {\n\tfields_by_name(collection: String!, field: String!): directus_fields\n}\n"
    patch:
      summary: Update a Field
      description: Update an existing field.
      operationId: updateField
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  description: Directus specific data type. Used to cast values in the API.
                  example: integer
                  type: string
                field:
                  type: string
                  description: Unique name of the field. Field name is unique within the collection.
                  example: id
                schema:
                  type: object
                  description: The schema info.
                  properties:
                    type:
                      description: The type of the field.
                      example: string
                      type: string
                    name:
                      type: string
                      description: The name of the field.
                      example: title
                    table:
                      type: string
                      description: The collection of the field.
                      example: posts
                    default_value:
                      type: string
                      description: The default value of the field.
                      example: null
                      nullable: true
                    max_length:
                      type: integer
                      description: The max length of the field.
                      example: null
                      nullable: true
                    is_nullable:
                      type: boolean
                      description: If the field is nullable.
                      example: false
                    is_primary_key:
                      type: boolean
                      description: If the field is primary key.
                      example: false
                    has_auto_increment:
                      type: boolean
                      description: If the field has auto increment.
                      example: false
                    foreign_key_column:
                      type: string
                      description: Related column from the foreign key constraint.
                      example: null
                      nullable: true
                    foreign_key_table:
                      type: string
                      description: Related table from the foreign key constraint.
                      example: null
                      nullable: true
                    comment:
                      type: string
                      description: Comment as saved in the database.
                      example: null
                      nullable: true
                    schema:
                      type: string
                      description: Database schema (pg only).
                      example: public
                    foreign_key_schema:
                      type: string
                      description: Related schema from the foreign key constraint (pg only).
                      example: null
                      nullable: true
                meta:
                  type: object
                  description: The meta info.
                  nullable: true
                  properties:
                    id:
                      type: integer
                      description: Unique identifier for the field in the `directus_fields` collection.
                      example: 3
                    collection:
                      type: string
                      description: Unique name of the collection this field is in.
                      example: posts
                    field:
                      type: string
                      description: Unique name of the field. Field name is unique within the collection.
                      example: title
                    special:
                      type: array
                      description: Transformation flag for field
                      example: null
                      items:
                        type: string
                      nullable: true
                    system-interface:
                      type: string
                      description: What interface is used in the admin app to edit the value for this field.
                      example: primary-key
                      nullable: true
                    options:
                      type: object
                      description: Options for the interface that's used. This format is based on the individual interface.
                      example: null
                      nullable: true
                    display:
                      type: string
                      description: What display is used in the admin app to display the value for this field.
                      example: null
                      nullable: true
                    display_options:
                      type: object
                      description: Options for the display that's used. This format is based on the individual display.
                      example: null
                      nullable: true
                    locked:
                      type: boolean
                      description: If the field can be altered by the end user. Directus system fields have this value set to `true`.
                      example: true
                    readonly:
                      type: boolean
                      description: Prevents the user from editing the value in the field.
                      example: false
                    hidden:
                      type: boolean
                      description: If this field should be hidden.
                      example: true
                    sort:
                      type: integer
                      description: Sort order of this field on the edit page of the admin app.
                      example: 1
                      nullable: true
                    width:
                      type: string
                      description: Width of the field on the edit form.
                      example: null
                      nullable: true
                      enum:
                        - half
                        - half-left
                        - half-right
                        - full
                        - fill
                        - null
                    group:
                      type: integer
                      description: What field group this field is part of.
                      example: null
                      nullable: true
                    translation:
                      type: object
                      description: 'Key value pair of `<language>: <translation>` that allows the user to change the displayed name of the field in the admin app.'
                      example: null
                      nullable: true
                    note:
                      type: string
                      description: A user provided note for the field. Will be rendered alongside the interface on the edit page.
                      example: ''
                      nullable: true
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Fields'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Fields
      parameters:
        - name: collection
          in: path
          description: Unique identifier of the collection the item resides in.
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: Unique identifier of the field.
          schema:
            type: string
          required: true
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateField } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateField(collection_name, field_name, partial_field_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              update_fields_item(collection: String!, field: String!, data: update_directus_fields_input!): directus_fields
            }
    delete:
      summary: Delete a Field
      description: Delete an existing field. This action can't be undone.
      operationId: deleteField
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Fields
      parameters:
        - name: collection
          in: path
          description: Unique identifier of the collection the item resides in.
          schema:
            type: string
          required: true
        - name: id
          in: path
          description: Unique identifier of the field.
          schema:
            type: string
          required: true
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deleteField } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deleteField(collection_name, field_name));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tdelete_fields_item(collection: String!, field: String!): delete_field\n}\n"
  /files:
    get:
      summary: List Files
      description: List all files that exist in Directus.
      security: []
      tags:
        - Files
      operationId: getFiles
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Meta'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Files'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readFiles } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readFile(file_id, query_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Query {\n\tfiles_by_id(id: ID!): directus_files\n}\n"
    post:
      summary: Upload a File
      description: Upload a new file.
      operationId: uploadFile
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/Files'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Files'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security: []
      tags:
        - Files
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, uploadFiles } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const formData = new FormData();
            formData.append('file_1_property', 'Value');
            formData.append('file', raw_file);
            formData.append('file_2_property', 'Value');
            formData.append('file', raw_file_2);

            const result = await client.request(uploadFiles(formData));
        - label: GraphQL
          lang: GraphQL
          source: |
            //Not currently supported by GraphQL.
    patch:
      summary: Update Multiple Files
      description: Update multiple files at the same time.
      security: []
      tags:
        - Files
      operationId: updateFiles
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - data
                - keys
              properties:
                data:
                  type: object
                  properties:
                    data:
                      type: string
                keys:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Files'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateFiles } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateFiles(file_id_array, partial_file_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tupdate_files_items(ids: [ID!]!, data: update_directus_files!): [directus_files]\n}\n"
    delete:
      summary: Delete Multiple Files
      description: Delete multiple existing files at once. This will also delete the files from disk.
      security: []
      tags:
        - Files
      operationId: deleteFiles
      requestBody:
        description: An array of file primary keys.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deleteFiles } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deleteFiles(file_id_array));

            //or

            const result = await client.request(deleteFiles(query_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tdelete_files_items(ids: [ID!]!): delete_many\n}\n"
  /files/{id}:
    get:
      summary: Retrieve a File
      description: Retrieve a single file by primary key.
      security: []
      tags:
        - Files
      operationId: getFile
      parameters:
        - $ref: '#/components/parameters/UUId'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Files'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readFiles } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readFile(file_id, query_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Query {
              files_by_id(id: ID!): directus_files
            }
    patch:
      summary: Update a File
      description: Update an existing file, and/or replace it's file contents.
      security: []
      tags:
        - Files
      operationId: updateFile
      parameters:
        - $ref: '#/components/parameters/UUId'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      requestBody:
        content:
          multipart/data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  description: File contents.
                  format: binary
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/Items'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Files'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateFile } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateFile(file_id, partial_file_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tupdate_files_item(id: ID!, data: update_directus_files_input!): directus_files\n}\n"
    delete:
      summary: Delete a File
      description: Delete an existing file. This will also delete the file from disk.
      security: []
      tags:
        - Files
      operationId: deleteFile
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      parameters:
        - $ref: '#/components/parameters/UUId'
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deleteFile } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deleteFile(file_id));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tdelete_files_item(id: ID!): delete_one\n}\n"
  /flows:
    get:
      summary: List Flows
      description: List all flows that exist in Directus.
      operationId: getFlows
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Meta'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Flows'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Flows
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readFlows } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readFlows(query));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Query {\n\tflows: [directus_flows]\n}\n"
    post:
      summary: Create Multiple Flows
      description: Create multiple new flows.
      operationId: createFlows
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/Flows'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Flows'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Flows
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, createFlows } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(createFlows(flows_object_array));
        - label: GraphQL
          lang: GraphQL
          source: |
            POST /graphql/system

            type Mutation {
              create_flows_items(data: [create_directus_flows_input!]!): [directus_flows]
            }
    patch:
      summary: Update Multiple Flows
      description: Update multiple flows at the same time.
      security: []
      tags:
        - Flows
      operationId: updateFlows
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - data
                - keys
              properties:
                data:
                  anyOf:
                    - $ref: '#/components/schemas/Flows'
                keys:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Flows'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateFlows } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateFlows(flow_id_array, partial_flow_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tupdate_flows_items(ids: [ID!]!, data: update_directus_flows_input): [directus_flows]\n}\n"
    delete:
      summary: Delete Multiple Flows
      description: Delete multiple existing flows.
      operationId: deleteFlows
      requestBody:
        description: An array of flows primary keys.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security: []
      tags:
        - Flows
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deleteFlows } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deleteFlows(flow_id_array));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tdelete_flows_items(ids: [ID!]!): delete_many\n}\n"
  /flows/{id}:
    get:
      summary: Retrieve a Flow
      description: Retrieve a single flow by unique identifier.
      operationId: getFlow
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Flows'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Flows
      parameters:
        - $ref: '#/components/parameters/UUId'
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readFlow } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readFlow(flow_id, query_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Query {\n\tflows_by_id(id: ID!): directus_flows\n}\n"
    patch:
      summary: Update a Flow
      description: Update an existing flow.
      operationId: updateFlow
      parameters:
        - $ref: '#/components/parameters/UUId'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/Flows'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Flows'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Flows
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateFlow } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateFlow(flow_id, partial_flow_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tupdate_flows_item(id: ID!, data: update_directus_flows_input): directus_flows\n}\n"
    delete:
      summary: Delete a Flow
      description: Delete an existing flow
      operationId: deleteFlow
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Flows
      parameters:
        - $ref: '#/components/parameters/UUId'
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deleteFlow } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deleteFlow(flow_id));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tdelete_flows_item(id: ID!): delete_one\n}\n"
  /flows/trigger/{id}:
    get:
      summary: Flow with GET webhook trigger
      description: Start a flow with GET webhook trigger.
      operationId: triggerFlowGET
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      responses:
        '200':
          description: Result of the flow, if any.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: {}
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Flows
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, triggerFlow } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(triggerFlow('GET', flow_id, query_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            // Not currently available in GraphQL
    post:
      summary: Flow with POST webhook trigger
      description: Start a flow with POST webhook trigger.
      operationId: triggerFlowPOST
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      requestBody:
        description: Payload for the POST request.
        content:
          application/json:
            schema:
              type: object
              properties:
                data: {}
      responses:
        '200':
          description: Result of the flow, if any.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: {}
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Flows
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, triggerFlow } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(triggerFlow('POST', flow_id, webhook_payload));
        - label: GraphQL
          lang: GraphQL
          source: |
            // Not currently available in GraphQL
  /folders:
    get:
      summary: List Folders
      description: List all folders that exist in Directus.
      operationId: getFolders
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Meta'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Folders'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Folders
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readFolders } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readFolders(query_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Query {\n\tfolders: directus_folders\n}\n"
    post:
      summary: Create Multiple Folders
      description: Create multiple new folders.
      operationId: createFolders
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/Folders'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Folders'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Folders
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, createFolders } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(createFolders(folder_object_array));
        - label: GraphQL
          lang: GraphQL
          source: |
            POST /graphql/system

            type Mutation {
              create_folders_items(data: [create_directus_folders_input!]!): [directus_folders]
            }
    patch:
      summary: Update Multiple Folders
      description: |
        Update multiple folders at the same time.

        Any files in these folders will be moved to the root folder.
      security: []
      tags:
        - Folders
      operationId: updateFolders
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - data
                - keys
              properties:
                data:
                  type: object
                  properties:
                    name:
                      type: string
                      example: Amsterdam
                      description: Name of the folder.
                    parent:
                      type: integer
                      description: Unique identifier of the parent folder. This allows for nested folders.
                  required:
                    - name
                keys:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Folders'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateFolders } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateFolders(folder_id_array, partial_folder_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tupdate_folders_items(ids: [ID!]!, data: update_directus_folders_input): [directus_folders]\n}\n"
    delete:
      summary: Delete Multiple Folders
      description: Delete multiple existing folders.
      operationId: deleteFolders
      requestBody:
        description: An array of folder primary keys.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security: []
      tags:
        - Folders
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deleteFolders } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deleteFolders(folder_id_array));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tdelete_folders_items(ids: [ID!]!): delete_many\n}\n"
  /folders/{id}:
    get:
      summary: Retrieve a Folder
      description: List an existing folder by primary key.
      operationId: getFolder
      parameters:
        - $ref: '#/components/parameters/UUId'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Folders'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Folders
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readFolder } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readFolder(folder_id, query_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Query {\n\tfolders_by_id(id: ID!): directus_folders\n}\n"
    patch:
      summary: Update a Folder
      description: Update an existing folder.
      operationId: updateFolder
      parameters:
        - $ref: '#/components/parameters/UUId'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the folder. Can't be null or empty.
                parent:
                  type: integer
                  example: 3
                  description: Unique identifier of the parent folder. This allows for nested folders.
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Folders'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Folders
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateFolder } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateFolder(folder_id, partial_folder_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tupdate_folders_item(id: ID!, data: update_directus_folders_input): directus_folders\n}\n"
    delete:
      summary: Delete a Folder
      description: Delete an existing folder. Any files in this folder will be moved to the root folder.
      operationId: deleteFolder
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Folders
      parameters:
        - $ref: '#/components/parameters/UUId'
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deleteFolder } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deleteFolder(folder_id));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tdelete_folders_item(id: ID!): delete_one\n}\n"
  /items/{collection}:
    get:
      summary: List all items in a collection.
      description: Returns a list of the items in the given collection.
      operationId: getCollectionItems
      parameters:
        - description: Unique identifier of the collection the item resides in.
          in: path
          name: collection
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Items'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Items
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readItems } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readItems('collection_name', query_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Query {
              <collection>: [<collection>]
            }
    post:
      summary: Create Multiple Items
      description: Create new items in the given collection.
      operationId: createItems
      parameters:
        - $ref: '#/components/parameters/Collection'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Meta'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/Items'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Items'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Items
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, createItems } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(createItems(collection_name, item_object_array));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              create_<collection>_items(data: [create_<collection>_input]): [<collection>]
            }
    patch:
      summary: Update Multiple Items
      description: Update multiple items at the same time.
      operationId: updateItems
      parameters:
        - $ref: '#/components/parameters/Collection'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - data
                - keys
              properties:
                data:
                  $ref: '#/components/schemas/Items'
                keys:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Items'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Items
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateItems } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateItems(collection_name, item_id_array, partial_item_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              update_<collection>_items(ids: [ID!]!, data: [update_<collection>_input]): [<collection>]
            }
    delete:
      summary: Delete Multiple Items
      description: Delete multiple items at the same time.
      operationId: deleteItems
      parameters:
        - $ref: '#/components/parameters/Collection'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - type: array
                  description: Primary keys of items to be deleted.
                  items:
                    type: string
                - type: object
                  description: Object containing either `keys` or `query` to selected what items to update.
                  properties:
                    keys:
                      type: array
                      items:
                        type: string
                    items:
                      type: object
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Items
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deleteItems } from '@directus/sdk';

            const client = createDirectus('https://directus.example.com').with(rest());

            const result = await client.request(deleteItems(collection_name, item_id_array));

            //or

            const result = await client.request(deleteItems(collection_name, query_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              delete_<collection>_items(ids: [ID!]!): delete_many
            }
  /items/{collection}/singleton:
    get:
      summary: Retrieve a Singleton
      description: |
        Retrieves a singleton of a given collection.

        The REST and GraphQL requests for singletons are the same as those used to Get Items but in contrast the response consists of a plain item object (the singleton) instead of an array of items.
      operationId: getSingleton
      parameters:
        - $ref: '#/components/parameters/Collection'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Items'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Items
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readSingleton } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readSingleton(collection_name));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Query {
              <collection>(version: String): <collection>
            }

            type Query {
              <collection>_by_version(version: String!): <collection_version_raw>
            }
    patch:
      summary: Update Singleton
      description: |
        Update a singleton item.

        The REST and GraphQL requests for singletons are the same as those used to Update Multiple Items but in contrast the request should consist of the plain item object.
      operationId: updateSingleton
      parameters:
        - $ref: '#/components/parameters/Collection'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/Items'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Items'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Items
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateSingleton } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateSingleton(collection_name, partial_item_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              update_<collection>_items(data: [update_<collection>_input]): [<collection>]
            }
  /items/{collection}/{id}:
    get:
      summary: Retrieve an Item
      description: Retrieves an item in a given collection.
      operationId: getCollectionItem
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/Collection'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Items'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Items
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readItem } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readItem(collection_name, item_id, query_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Query {
              <collection>_by_id(id: ID!, version: String): <collection>
            }

            type Query {
              <collection>_by_version(id: ID!, version: String!): <collection_version_raw>
            }
    patch:
      summary: Update an item
      description: Update an existing item.
      operationId: updateItem
      parameters:
        - name: id
          in: path
          description: Unique identifier of the item.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/Collection'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/Items'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Items'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Items
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateItem } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateItem(collection_name, item_id, partial_item_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              update_<collection>_item(id: ID!, data: update_<collection>_input!): <collection>
            }
    delete:
      summary: Delete an item
      description: Delete an existing item.
      operationId: deleteItem
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the item.
          schema:
            type: string
        - $ref: '#/components/parameters/Collection'
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Items
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deleteItem } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deleteItem(collection_name, item_id));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              delete_<collection>_item(id: ID!): delete_one
            }
  /notifications:
    get:
      summary: List notifications
      description: List all notifications that exist in Directus.
      operationId: getNotifications
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Page'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notifications'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Notifications
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readNotifications } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readNotifications(query_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Query {
              notifications: [directus_notifications]
            }
    post:
      summary: Create Multiple notifications
      description: Create multiple new notifications.
      operationId: createNotifications
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/Notifications'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notifications'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Notifications
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, createNotifications } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(createNotifications(notification_object_array));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              create_notifications_items(data: [create_directus_notifications_input!]!): [directus_notifications]
            }
    patch:
      summary: Update Multiple notifications
      description: Update multiple notifications at the same time.
      operationId: updateNotifications
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - data
                - keys
              properties:
                data:
                  $ref: '#/components/schemas/Notifications'
                keys:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notifications'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Notifications
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateNotifications } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateNotifications(notification_id_array, partial_notification_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              update_notifications_items(ids: [ID!]!, data: update_directus_notifications_input): [directus_notifications]
            }
    delete:
      summary: Delete Multiple notifications
      description: Delete multiple existing notifications.
      operationId: deleteNotifications
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      requestBody:
        description: An array of notification primary keys.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Notifications
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deleteNotifications } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deleteNotifications(notification_id_array));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              delete_notifications_items(ids: [ID!]!): delete_many
            }
  /notifications/{id}:
    get:
      summary: Retrieve a notification
      description: List an existing notification by primary key.
      operationId: getNotification
      parameters:
        - name: id
          in: path
          description: Unique identifier of the notification.
          schema:
            type: string
          required: true
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Notifications'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Notifications
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readNotification } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readNotification(notification_id, query_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Query {
              notifications_by_id(id: ID!): directus_notifications
            }
    patch:
      summary: Update a Notification
      description: Update an existing notification.
      operationId: updateNotification
      parameters:
        - name: id
          in: path
          description: Unique identifier of the notification.
          schema:
            type: string
          required: true
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/Notifications'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Notifications'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Notifications
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateNotification } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateNotification(notification_id, partial_notification_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              update_notifications_item(id: ID!, data: update_directus_notifications_input): directus_notifications
            }
    delete:
      summary: Delete an notification
      description: Delete an existing notification.
      operationId: deleteNotification
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the notification.
          schema:
            type: string
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Notifications
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deleteNotification } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deleteNotification(notification_id));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              delete_notifications_item(id: ID!): delete_one
            }
  /operations:
    get:
      summary: List Operations
      description: List all operations that exist in Directus.
      operationId: getOperations
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Page'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Operations'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Operations
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readOperations } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readOperations(query_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Query {\n\toperations: [directus_operations]\n}\n"
    post:
      summary: Create Multiple Operations
      description: Create multiple new operations.
      operationId: createOperations
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/Operations'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Operations'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Operations
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, createOperations } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(createOperations(operations_object_array));
        - label: GraphQL
          lang: GraphQL
          source: |
            POST /graphql/system

            type Mutation {
              create_operations_items(data: [create_directus_operations_input!]!): [directus_operations]
            }
    patch:
      summary: Update Multiple Operations
      description: Update multiple operations at the same time.
      security: []
      tags:
        - Operations
      operationId: updateOperations
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - data
                - keys
              properties:
                data:
                  anyOf:
                    - $ref: '#/components/schemas/Operations'
                keys:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Operations'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateOperations } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateOperations(operations_id_array, partial_operations_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              update_operations_items(ids: [ID!]!, data: update_directus_operations_input): [directus_operations]
            }
    delete:
      summary: Delete Multiple Operations
      description: Delete multiple existing operations.
      operationId: deleteOperations
      requestBody:
        description: An array of operations primary keys.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security: []
      tags:
        - Operations
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deleteOperations } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deleteOperations(operations_id_array));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tdelete_operations_items(ids: [ID!]!): delete_many\n}\n"
  /operations/{id}:
    get:
      summary: Retrieve an Operation
      description: Retrieve a single operation by primary key.
      operationId: getOperation
      parameters:
        - $ref: '#/components/parameters/UUId'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Operations'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Operations
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readOperation } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readOperation(operation_id, query_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Query {
              operations_by_id(id: ID!): directus_operations
            }
    post:
      summary: Triggering an Operation
      description: Trigger an operation based on primary key.
      operationId: triggerOperation
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        description: Payload for the operation, if needed.
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Result of the operation, if any.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: {}
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Operations
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, triggerOperation } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(triggerOperation(operation_id, webhook_payload_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            // Not currently supported in GraphQL
    patch:
      summary: Update an Operation
      description: Update an existing operation.
      operationId: updateOperation
      parameters:
        - $ref: '#/components/parameters/UUId'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/Operations'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Operations'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Operations
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateOperation } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateOperation(operation_id, partial_operation_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tupdate_operations_item(id: ID!, data: update_directus_operations_input): directus_operations\n}\n"
    delete:
      summary: Delete an Operation
      description: Delete an existing operation
      operationId: deleteOperation
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Operations
      parameters:
        - $ref: '#/components/parameters/UUId'
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deleteOperation } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deleteOperation(operation_id));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tdelete_operations_item(id: ID!): delete_one\n}\n"
  /panels:
    get:
      summary: List panels
      description: List all panels that exist in Directus.
      operationId: getPanels
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Page'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Panels'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Panels
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readPanels } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readPanels(query_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Query {
              panels: [directus_panels]
            }
    post:
      summary: Create Multiple panels
      description: Create multiple new panels.
      operationId: createPanels
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/Panels'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Panels'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Panels
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, createPanel } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(createPanels(panel_object_array));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              create_panels_items(data: [create_directus_panels_input!]!): [directus_panels]
            }
    patch:
      summary: Update Multiple panels
      description: Update multiple panels at the same time.
      operationId: updatePanels
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - keys
                - data
              properties:
                data:
                  $ref: '#/components/schemas/Panels'
                keys:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Panels'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Panels
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updatePanels } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updatePanels(panel_id_array, partial_panel_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              update_panels_items(ids: [ID!]!, data: update_directus_panels_input): [directus_panels]
            }
    delete:
      summary: Delete Multiple panels
      description: Delete multiple existing panels.
      operationId: deletePanels
      requestBody:
        description: An array of panel primary keys.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Panels
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deletePanels } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deletePanels(panel_id_array));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              delete_panels_items(ids: [ID!]!): delete_many
            }
  /panels/{id}:
    get:
      summary: Retrieve a panel
      description: List an existing panel by primary key.
      operationId: getPanel
      parameters:
        - name: id
          in: path
          description: Unique identifier of the panel.
          schema:
            type: string
          required: true
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Panels'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Panels
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readPanel } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readPanel(panel_id, query_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Query {
              panels_by_id(id: ID!): directus_panels
            }
    patch:
      summary: Update a panel
      description: Update an existing panel.
      operationId: updatePanel
      parameters:
        - name: id
          in: path
          description: Unique identifier of the panel.
          schema:
            type: string
          required: true
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/Panels'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Panels'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Panels
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updatePanel } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updatePanel(panel_id, partial_panel_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              update_panels_item(id: ID!, data: update_directus_panels_input): directus_panels
            }
    delete:
      summary: Delete an panel
      description: Delete an existing panel.
      operationId: deletePanel
      parameters:
        - name: id
          in: path
          description: Unique identifier of the panel.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Panels
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deletePanel } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deletePanel(panel_id));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              delete_panels_item(id: ID!): delete_one
            }
  /permissions:
    get:
      summary: List Permissions
      description: List all permissions that exist in Directus.
      operationId: getPermissions
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Page'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Permissions'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Permissions
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readPermissions } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readPermissions(query_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Query {\n\tpermissions: directus_permissions\n}\n"
    post:
      summary: Create Multiple Permission Rules
      description: Create multiple new permission rules
      operationId: createPermissions
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Page'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - collection
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/Permissions'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Permissions'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Permissions
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, createPermissions } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(createPermissions(permission_object_array));
        - label: GraphQL
          lang: GraphQL
          source: |
            POST /graphql/system

            type Mutation {
              create_permissions_items(data: [create_directus_permissions_input!]!): [directus_permissions]
            }
    patch:
      summary: Update Multiple Permission Rules
      description: Update multiple permissions at the same time.
      security: []
      tags:
        - Permissions
      operationId: updatePermissions
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - data
                - keys
              properties:
                data:
                  $ref: '#/components/schemas/Permissions'
                keys:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Permissions'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updatePermissions } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updatePermissions(permission_id_array, permission_object_panel));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tupdate_permissions_items(id: [ID!]!, data: update_directus_permissions_input!): [directus_permissions]\n}\n"
    delete:
      summary: Delete Multiple Permission Ruless
      description: Delete multiple existing permission rules.
      operationId: deletePermissions
      requestBody:
        description: An array of permissions primary keys.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security: []
      tags:
        - Permissions
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deletePermissions } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deletePermissions(permission_id_array));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tdelete_permissions_items(ids: [ID!]!): delete_many\n}\n"
  /permissions/{id}:
    get:
      summary: Retrieve a Permission Rule
      description: Retrieve a single permission rules object by unique identifier.
      operationId: getPermission
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Permissions'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Permissions
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readPermission } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readPermission(permission_id, query_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Query {\n\tpermissions_by_id(id: ID!): directus_permissions\n}\n"
    patch:
      summary: Update a Permission Rule
      description: Update an existing permission rule
      operationId: updatePermission
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/Meta'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                collection:
                  type: object
                  description: What collection this permission applies to.
                comment:
                  type: string
                  description: If the user can post comments. full.
                  enum:
                    - none
                    - create
                    - update
                create:
                  type: string
                  description: If the user can create items.
                  enum:
                    - none
                    - full
                delete:
                  type: string
                  description: If the user can update items.
                  enum:
                    - none
                    - mine
                    - role
                    - full
                explain:
                  type: string
                  description: If the user is required to leave a comment explaining what was changed.
                  enum:
                    - none
                    - create
                    - update
                    - always
                read:
                  type: string
                  description: If the user can read items.
                  enum:
                    - none
                    - mine
                    - role
                    - full
                read_field_blacklist:
                  type: object
                  description: Explicitly denies read access for specific fields.
                role:
                  type: object
                  description: Unique identifier of the role this permission applies to.
                status:
                  type: object
                  description: What status this permission applies to.
                status_blacklist:
                  type: object
                  description: Explicitly denies specific statuses to be used.
                update:
                  type: string
                  description: If the user can update items.
                  enum:
                    - none
                    - mine
                    - role
                    - full
                write_field_blacklist:
                  type: object
                  description: Explicitly denies write access for specific fields.
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Permissions'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Permissions
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updatePermission } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updatePermission(permission_id, partial_permission_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tupdate_permissions_item(id: ID!, data: update_directus_permissions_input!): directus_permissions\n}\n"
    delete:
      summary: Delete a Permission
      description: Delete an existing permission
      operationId: deletePermission
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Permissions
      parameters:
        - $ref: '#/components/parameters/Id'
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deletePermission } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deletePermission(permission_id));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tdelete_permissions_item(id: ID!): delete_one\n}\n"
  /permissions/me:
    get:
      summary: Get Current User Permissions
      description: |
        Check the current user's permissions across all collections.

        The response is an object that contains one entry for every collection with at least one permission. Each collection has entries corresponding to the actions the user is able to perform on the collection.

        The `access` property indicates the level of access the user has for an action for a collection. `"none"` means the user has no access, `"partial"` means the user has access to some items, but may not have access to all items, and `"full"` means the user has access to all items.
      operationId: getUserPermissions
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              examples:
                example:
                  value:
                    <collection>:
                      create:
                        access: none | partial | full
                        fields: permission_fields
                        presets: permission_presets
                      read:
                        access: none | partial | full
                        full_access: boolean
                        presets: permission_presets
                      update:
                        access: none | partial | full
                        full_access: boolean
                        fields: permission_fields
                        presets: permission_presets
                      delete:
                        access: none | partial | full
                        full_access: boolean
                      share:
                        access: none | partial | full
                        full_access: boolean
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Permissions
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readUserPermissions } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readUserPermissions());
        - label: GraphQL
          lang: GraphQL
          source: |
            POST /graphql/system

            query {
                permissions_me
            }
  /permissions/me/{collection}/{id}:
    get:
      summary: Check Permissions for a Specific Item
      description: |
        Check the current user's permissions on a specific item.

        For a singleton where update access is given, the presets and fields properties from the corresponding update permission are additionally returned.

        The response structure is maintained in any case, even if the collection or item does not exist. To check for the existence of an item, use the get items endpoint instead.
      operationId: readItemPermissions
      parameters:
        - $ref: '#/components/parameters/Collection'
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              examples:
                collection:
                  value:
                    update:
                      access: boolean
                    delete:
                      access: boolean
                    share:
                      access: boolean
                singleton:
                  value:
                    update:
                      access: boolean
                      presets: permission_presets
                      fields: permission_fields
                    delete:
                      access: boolean
                    share:
                      access: boolean
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Permissions
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readItemPermissions } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            // collection item
            const result = await client.request(readItemPermissions(collection_name, item_id));

            // singleton
            const result = await client.request(readItemPermissions(collection_name));
        - label: GraphQL
          lang: GraphQL
          source: |
            //Currently not supported in GraphQL.
  /policies:
    get:
      summary: List policies
      description: List all policies that exist in Directus.
      operationId: getPolicies
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Page'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Policies'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Policies
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readPolicies } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readPolicies(query_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Query {
              policies: [directus_policies]
            }
    post:
      summary: Create Multiple policies
      description: Create multiple new policies.
      operationId: createPolicies
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/Policies'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Policies'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Policies
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, createPolies } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(createPolicies(policy_object_array));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              create_policies_items(data: [create_directus_policies_input!]!): [directus_policies]
            }
    patch:
      summary: Update Multiple policies
      description: Update multiple existing policies.
      operationId: updatePolicies
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - keys
                - data
              properties:
                data:
                  $ref: '#/components/schemas/Policies'
                keys:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Policies'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Policies
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updatePolicies } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updatePolicies(policies_id_array, partial_policy_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              update_policies_items(ids: [ID!]!, data: update_directus_policies_input): [directus_policies]
            }
    delete:
      summary: Delete Multiple policies
      description: Delete multiple existing policies.
      operationId: deletePolicies
      requestBody:
        description: An array of policy primary keys.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Policies
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deletePolicies } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deletePolicies(policy_id_array));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              delete_policies_items(ids: [ID!]!): delete_many
            }
  /policies/{id}:
    get:
      summary: Retrieve a policy
      description: List an existing policy by primary key.
      operationId: getPolicy
      parameters:
        - name: id
          in: path
          description: Unique identifier of the Policy.
          schema:
            type: string
          required: true
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Policies'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Policies
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readPolicy } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readPolicy(policy_id, query_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Query {
              policies_by_id(id: ID!): directus_policies
            }
    patch:
      summary: Update a policy
      description: Update an existing policy.
      operationId: updatePolicy
      parameters:
        - name: id
          in: path
          description: Unique identifier of the policy.
          schema:
            type: string
          required: true
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/Policies'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Policies'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Policies
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updatePolicy } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updatePolicy(policy_id, partial_policy_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              update_policies_item(id: ID!, data: update_directus_policys_input): directus_policies
            }
    delete:
      summary: Delete a policy
      description: Delete an existing policy.
      operationId: deletePolicy
      parameters:
        - name: id
          in: path
          description: Unique identifier of the policy.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Policies
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deletePolicy } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deletePolicy(policy_id));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              delete_policies_item(id: ID!): delete_one
            }
  /presets:
    get:
      summary: List Presets
      security: []
      tags:
        - Presets
      operationId: getPresets
      description: List all presets that exist in Directus. The data returned in this endpoint will be filtered based on the user's permissions. For example, presets for a role other than the current user's role won't be returned.
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Meta'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Presets'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readPresets } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readPresets(object_field));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Query {\n\tpresets: [directus_presets]\n}\n"
    post:
      summary: Create Multiple Presets
      description: Create multiple new Presets.
      operationId: createPresets
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/Presets'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Presets'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Presets
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, createPresets } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(createPresets(presets_object_array));
        - label: GraphQL
          lang: GraphQL
          source: |
            POST /graphql/system

            type Mutation {
              create_presets_items(data: [create_directus_presets_input!]!): [directus_presets]
            }
    patch:
      summary: Update Multiple Presets
      description: Update multiple presets at the same time.
      security: []
      tags:
        - Presets
      operationId: updatePresets
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - keys
                - data
              properties:
                keys:
                  type: array
                  items:
                    type: string
                data:
                  type: object
                  required:
                    - collection
                  properties:
                    collection:
                      type: string
                      description: What collection this collection preset is used for.
                      example: articles
                    title:
                      type: string
                      description: Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark.
                      example: Highly rated articles
                    role:
                      type: string
                      description: The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role.
                      example: null
                    search:
                      type: string
                      description: What the user searched for in search/filter in the header bar.
                    filters:
                      type: array
                      items:
                        type: object
                        properties:
                          key:
                            type: string
                            example: aHKLAakdVghzD
                          field:
                            type: string
                            example: rating
                          operator:
                            type: string
                            example: gte
                          value:
                            type: integer
                            example: 4.5
                    layout:
                      type: string
                      description: Name of the view type that is used.
                    layout_query:
                      type: string
                      description: Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters.
                    layout_options:
                      type: string
                      description: Options of the views. The properties in here are controlled by the layout.
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Presets'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updatePresets } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updatePresets(preset_id_array, partial_preset_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tupdate_presets_items(ids: [ID!]!, data: update_directus_presets_input): [directus_presets]\n}\n"
    delete:
      summary: Delete Multiple Presets
      description: Delete multiple existing presets.
      operationId: deletePresets
      requestBody:
        description: An array of preset primary keys.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security: []
      tags:
        - Presets
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deletePresets } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deletePreset(preset_id_array));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tdelete_presets_items(ids: [ID!]!): delete_many\n}\n"
  /presets/{id}:
    get:
      summary: Retrieve a Preset
      security: []
      tags:
        - Presets
      operationId: getPreset
      description: Retrieve a single preset by unique identifier.
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Presets'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readPreset } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readPreset(preset_id, query_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Query {\n\tpresets_by_id(id: ID!): directus_presets\n}\n"
    patch:
      summary: Update a Preset
      security: []
      tags:
        - Presets
      operationId: updatePreset
      description: Update an existing preset.
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - collection
              properties:
                collection:
                  type: string
                  description: What collection this collection preset is used for.
                  example: articles
                title:
                  type: string
                  description: Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark.
                  example: Highly rated articles
                role:
                  type: integer
                  description: The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role.
                search_query:
                  type: string
                  description: What the user searched for in search/filter in the header bar.
                filters:
                  type: array
                  items:
                    type: object
                    properties:
                      field:
                        type: string
                        example: rating
                      operator:
                        type: string
                        example: gte
                      value:
                        type: integer
                        example: 4.5
                view_type:
                  type: string
                  description: Name of the view type that is used. Defaults to tabular.
                view_query:
                  type: string
                  description: View query that's saved per view type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters.
                view_options:
                  type: string
                  description: Options of the views. The properties in here are controlled by the layout.
                translation:
                  type: object
                  description: Key value pair of language-translation. Can be used to translate the bookmark title in multiple languages.
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Presets'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updatePresets } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updatePreset(preset_id, partial_preset_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              update_presets_item(id: ID!, data: update_directus_presets_input): directus_presets
            }
    delete:
      summary: Delete a Preset
      security: []
      tags:
        - Presets
      operationId: deletePreset
      description: Delete an existing preset.
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      parameters:
        - $ref: '#/components/parameters/Id'
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deletePreset } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deletePreset(preset_id));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tdelete_presets_item(id: ID!): delete_one\n}\n"
  /relations:
    get:
      summary: List Relations
      description: |
        List all relations that exist in Directus.

        The data returned in this endpoint will be filtered based on the user's permissions. For example, relations that apply to a collection that the current user doesn't have access to are stripped out.
      operationId: getRelations
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Page'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Relations'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Relations
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readRelations } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readRelations(query_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Query {\n\trelations: [directus_relations]\n}\n"
    post:
      summary: Create a Relation
      description: Create a new relation.
      operationId: createRelation
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                collection_many:
                  type: string
                  description: Collection that has the field that holds the foreign key.
                  example: articles
                collection_one:
                  type: string
                  description: Collection on the _one_ side of the relationship.
                  example: authors
                field_many:
                  type: string
                  description: Foreign key. Field that holds the primary key of the related collection.
                  example: author
                field_one:
                  type: string
                  description: Alias column that serves as the _one_ side of the relationship.
                  example: books
                junction_field:
                  type: string
                  description: Field on the junction table that holds the primary key of the related collection.
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Relations'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Relations
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, createRelation } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(createRelation(relation_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tcreate_relations_item(data: create_directus_relations_input!): directus_relations\n}\n"
  /relations/{id}:
    get:
      summary: Retrieve a Relation
      description: Retrieve a single relation by unique identifier.
      operationId: getRelation
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Relations'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Relations
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readRelation } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readRelation(collection_name, field_name, query_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Query {\n\trelations_by_name(collection: String!, field: String!): directus_relations\n}\n"
    patch:
      summary: Update a Relation
      description: Update an existing relation
      operationId: updateRelation
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                collection_many:
                  type: string
                  description: Collection that has the field that holds the foreign key.
                collection_one:
                  type: string
                  description: Collection on the _one_ side of the relationship.
                field_many:
                  type: string
                  description: Foreign key. Field that holds the primary key of the related collection.
                field_one:
                  type: string
                  description: Alias column that serves as the _one_ side of the relationship.
                  example: books
                junction_field:
                  type: string
                  description: Field on the junction table that holds the primary key of the related collection.
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Relations'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Relations
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateRelation } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateRelation(collection_name, field_name, partial_relation_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tupdate_relations_item(collection: String!, field: String!, data: update_directus_relations_input!): directus_relations\n}\n"
    delete:
      summary: Delete a Relation
      description: Delete an existing relation.
      operationId: deleteRelation
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Relations
      parameters:
        - $ref: '#/components/parameters/Id'
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deleteRelation } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deleteRelation(collection_name, field_name));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tdelete_relations_item(collection: String!, field: String!): delete_one\n}\n"
  /revisions:
    get:
      summary: List Revisions
      description: |
        List the revisions.

        The data returned in this endpoint will be filtered based on the user's permissions. For example, revisions that apply to a collection that the current user doesn't have access to are stripped out.
      operationId: getRevisions
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Page'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Revisions'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Revisions
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readRevisions } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readRevisions(query_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Query {\n\trevisions: [directus_revisions]\n}\n"
  /revisions/{id}:
    get:
      summary: Retrieve a Revision
      description: List an existing revision by primary key.
      operationId: getRevision
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Revisions'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Revisions
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readRevision } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readRevision(revision_id, query_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Query {\n\trevisions_by_id(id: ID!): directus_revisions\n}\n"
  /roles:
    get:
      summary: List Roles
      description: List all roles that exist in Directus.
      operationId: getRoles
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Page'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Roles'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Roles
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readRoles } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readRoles(query_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Query {\n\troles: [directus_roles]\n}\n"
    post:
      summary: Create Multiple Roles
      description: Create multiple new roles.
      operationId: createRoles
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/Roles'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Roles'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Roles
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, createRoles } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(createRoles(roles_object_array));
        - label: GraphQL
          lang: GraphQL
          source: |
            POST /graphql/system

            type Mutation {
              create_roles_items(data: [create_directus_roles_input!]!): [directus_roles]
            }
    patch:
      summary: Update Multiple Roles
      description: Update multiple roles at the same time.
      security: []
      tags:
        - Roles
      operationId: updateRoles
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - keys
                - data
              properties:
                keys:
                  type: array
                  items:
                    type: string
                data:
                  type: object
                  properties:
                    description:
                      type: string
                      description: Description of the role.
                    enforce_tfa:
                      type: boolean
                      description: Whether or not this role enforces the use of 2FA.
                    external_id:
                      type: string
                      description: ID used with external services in SCIM.
                    ip_access:
                      type: array
                      description: Array of IP addresses that are allowed to connect to the API as a user of this role.
                      items:
                        type: string
                    module_listing:
                      type: string
                      description: Custom override for the admin app module bar navigation.
                    name:
                      type: string
                      description: Name of the role.
                      example: Interns
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Roles'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateRoles } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateRoles(role_id_array, partial_role_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tupdate_roles_items(ids: [ID!]!, data: update_directus_roles_input): [directus_roles]\n}\n"
    delete:
      summary: Delete Multiple Roles
      description: Delete multiple existing roles.
      operationId: deleteRoles
      requestBody:
        description: An array of role primary keys.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security: []
      tags:
        - Roles
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deleteRoles } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deleteRoles(role_id_array));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tdelete_roles_items(ids: [ID!]!): delete_many\n}\n"
  /roles/{id}:
    get:
      summary: Retrieve a Role
      description: Retrieve a single role by unique identifier.
      operationId: getRole
      parameters:
        - $ref: '#/components/parameters/UUId'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Roles'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Roles
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readRole } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readRole(role_id, query_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Query {
              roles_by_id(id: ID!): directus_roles
            }
    patch:
      summary: Update a Role
      description: Update an existing role
      operationId: updateRole
      parameters:
        - $ref: '#/components/parameters/UUId'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  description: Description of the role.
                enforce_tfa:
                  type: boolean
                  description: Whether or not this role enforces the use of 2FA.
                external_id:
                  type: string
                  description: ID used with external services in SCIM.
                ip_access:
                  type: array
                  description: Array of IP addresses that are allowed to connect to the API as a user of this role.
                  items:
                    type: string
                module_listing:
                  type: string
                  description: Custom override for the admin app module bar navigation.
                name:
                  type: string
                  description: Name of the role.
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Roles'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Roles
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateRole } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateRole(role_id, partial_role_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tupdate_roles_item(id: ID!, data: update_directus_roles_input): directus_roles\n}\n"
    delete:
      summary: Delete a Role
      description: Delete an existing role
      operationId: deleteRole
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Roles
      parameters:
        - $ref: '#/components/parameters/UUId'
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deleteRole } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deleteRole(role_id));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tdelete_roles_item(id: ID!): delete_one\n}\n"
  /schema/apply:
    post:
      summary: Apply Schema Difference
      description: Update the instance's schema by passing the diff previously retrieved via `/schema/diff` endpoint in the JSON request body or a JSON/YAML file. This endpoint is only available to admin users.
      operationId: schemaApply
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/Diff'
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '204':
          description: Successful request
        '403':
          $ref: '#/components/responses/UnauthorizedError'
      security: []
      tags:
        - Schema
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, schemaApply } from '@directus/sdk';

            const client = createDirectus('https://directus.example.com').with(rest());

            const result = await client.request(
              schemaApply({
                hash: '7d4499bc1e09bab3558b46cc09cd83fea2c05144',
                diff: {
                  collections: [
                    {
                      collection: 'articles',
                      diff: [
                        {
                          kind: 'N',
                          rhs: {
                            collection: 'articles',
                            meta: {
                              accountability: 'all',
                              archive_app_filter: true,
                              archive_field: null,
                              archive_value: null,
                              collapse: 'open',
                              collection: 'articles',
                              color: null,
                              display_template: null,
                              group: null,
                              hidden: false,
                              icon: null,
                              item_duplication_fields: null,
                              note: null,
                              singleton: false,
                              sort: null,
                              sort_field: null,
                              translations: null,
                              unarchive_value: null,
                            },
                            schema: {
                              name: 'articles',
                            },
                          },
                        },
                      ],
                    },
                  ],
                  fields: [
                    {
                      collection: 'articles',
                      field: 'id',
                      diff: [
                        {
                          kind: 'N',
                          rhs: {
                            collection: 'articles',
                            field: 'id',
                            type: 'integer',
                            meta: {
                              collection: 'articles',
                              conditions: null,
                              display: null,
                              display_options: null,
                              field: 'id',
                              group: null,
                              hidden: true,
                              interface: 'input',
                              note: null,
                              options: null,
                              readonly: true,
                              required: false,
                              sort: null,
                              special: null,
                              translations: null,
                              validation: null,
                              validation_message: null,
                              width: 'full',
                            },
                            schema: {
                              name: 'id',
                              table: 'articles',
                              data_type: 'integer',
                              default_value: null,
                              max_length: null,
                              numeric_precision: null,
                              numeric_scale: null,
                              is_nullable: false,
                              is_unique: false,
                              is_primary_key: true,
                              is_generated: false,
                              generation_expression: null,
                              has_auto_increment: true,
                              foreign_key_table: null,
                              foreign_key_column: null,
                            },
                          },
                        },
                      ],
                    },
                    {
                      collection: 'articles',
                      field: 'title',
                      diff: [
                        {
                          kind: 'N',
                          rhs: {
                            collection: 'articles',
                            field: 'title',
                            type: 'string',
                            meta: {
                              collection: 'articles',
                              conditions: null,
                              display: null,
                              display_options: null,
                              field: 'title',
                              group: null,
                              hidden: false,
                              interface: 'input',
                              note: null,
                              options: null,
                              readonly: false,
                              required: false,
                              sort: null,
                              special: null,
                              translations: null,
                              validation: null,
                              validation_message: null,
                              width: 'full',
                            },
                            schema: {
                              name: 'title',
                              table: 'articles',
                              data_type: 'varchar',
                              default_value: null,
                              max_length: 255,
                              numeric_precision: null,
                              numeric_scale: null,
                              is_nullable: true,
                              is_unique: false,
                              is_primary_key: false,
                              is_generated: false,
                              generation_expression: null,
                              has_auto_increment: false,
                              foreign_key_table: null,
                              foreign_key_column: null,
                            },
                          },
                        },
                      ],
                    },
                  ],
                  relations: [],
                },
              })
            );
        - label: GraphQL
          lang: GraphQL
          source: |
            // Not supported in GraphQL
  /schema/diff:
    post:
      summary: Retrieve Schema Difference
      description: |
        Compare the current instance's schema against the schema snapshot in JSON request body and retrieve the difference. This endpoint is only available to admin users.

        Alternatively, upload a JSON or YAML schema file.

        Does not allow different Directus versions and database vendors by default. You can opt in to bypass these checks by passing the `force` query parameter.
      operationId: schemaDiff
      parameters:
        - name: force
          description: Bypass version and database vendor restrictions.
          in: query
          required: false
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/Schema'
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Diff'
        '204':
          description: No schema difference.
        '403':
          $ref: '#/components/responses/UnauthorizedError'
      security: []
      tags:
        - Schema
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: "::: details **Toggle Open to See Request**\n\nimport { createDirectus, rest, schemaDiff } from '@directus/sdk';\n\nconst client = createDirectus('directus_project_url').with(rest());\n\nconst result = await client.request(\n\tschemaDiff({\n\t\tversion: version_num,\n\t\tdirectus: 'directus_version',\n\t\tvendor: 'database_type',\n\t\tcollections: [\n\t\t\t{\n\t\t\t\tcollection: 'collection_name',\n\t\t\t\tmeta: {\n\t\t\t\t\t// Meta fields\n\t\t\t\t},\n\t\t\t\tschema: {\n\t\t\t\t\t// Schema fields\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\tfields: [\n\t\t\t{\n\t\t\t\tcollection: 'collection_name',\n\t\t\t\tfield: 'field_1_id',\n\t\t\t\ttype: 'field_1_type',\n\t\t\t\tmeta: {\n\t\t\t\t\t// Meta fields\n\t\t\t\t},\n\t\t\t\tschema: {\n\t\t\t\t\t// Meta fields\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tcollection: 'collection_name',\n\t\t\t\tfield: 'field_2_id',\n\t\t\t\ttype: 'field_2_type',\n\t\t\t\tmeta: {\n\t\t\t\t\t// Meta fields\n\t\t\t\t},\n\t\t\t\tschema: {\n\t\t\t\t\t// Meta fields\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tcollection: 'collection_name',\n\t\t\t\tfield: 'field_3_id',\n\t\t\t\ttype: 'field_3_type',\n\t\t\t\tmeta: {\n\t\t\t\t\t// Meta fields\n\t\t\t\t},\n\t\t\t\tschema: {\n\t\t\t\t\t// Meta fields\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\trelations: [],\n\t})\n);\n\nconsole.dir(result, { depth: null });\n\n:::\n"
        - label: GraphQL
          lang: GraphQL
          source: |
            // Not supported in GraphQL
  /schema/snapshot:
    get:
      summary: Retrieve Schema Snapshot
      description: Retrieve the current schema. This endpoint is only available to admin users.
      operationId: schemaSnapshot
      parameters:
        - $ref: '#/components/parameters/Export'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Schema'
            text/yaml:
              schema:
                type: string
                format: binary
        '403':
          $ref: '#/components/responses/UnauthorizedError'
      security: []
      tags:
        - Schema
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, schemaSnapshot } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(schemaSnapshot());
        - label: GraphQL
          lang: GraphQL
          source: |
            // Not supported in GraphQL
  /server/info:
    get:
      summary: System Info
      description: Provides detailed information about the project server, its schema, and its health.
      operationId: serverInfo
      parameters:
        - description: The first time you create a project, the provided token will be saved and required for subsequent project installs. It can also be found and configured in `/config/__api.json` on your server.
          in: query
          name: super_admin_token
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Settings'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Server
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, serverInfo } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(serverInfo());
        - label: GraphQL
          lang: GraphQL
          source: "GET /graphql/system\n\ntype Query {\n\tserver_info: server_info\n}\n"
  /server/ping:
    get:
      summary: Ping
      description: Ping, pong. Ping.. pong.
      operationId: ping
      responses:
        '200':
          content:
            application/text:
              schema:
                type: string
                pattern: pong
                example: pong
          description: Successful request
      security: []
      tags:
        - Server
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, serverPing } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(serverPing());
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Query {\n\tserver_ping: String\n}\n"
  /server/specs/graphql:
    get:
      summary: Get GraphQL SDL
      description: Retrieve the GraphQL SDL for the current project.
      operationId: readGraphqlSdl
      responses:
        '200':
          description: GraphQL SDL file.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Server
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readGraphqlSdl } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readGraphqlSdl(scope));
        - label: GraphQL
          lang: GraphQL
          source: |
            GET /graphql/system

            type Query {
              server_specs_graphql(scope: graphql_sdl_scope): String
            }
  /server/specs/oas:
    get:
      summary: Get OpenAPI Specification
      description: Retrieve the OpenAPI spec for the current project.
      operationId: readOpenApiSpec
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                description: Object conforming to the OpenAPI Specification
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Server
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readOpenApiSpec } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readOpenApiSpec());
        - label: GraphQL
          lang: GraphQL
          source: |
            POST /graphql/system

            type Query {
              server_specs_oas: String
            }
  /server/health:
    get:
      summary: Health
      description: |
        Shows you a general health status for the server and all connected (third party) services.

        By default, the endpoint only returns a status of ok, warn or error.

        By authenticating as an admin, it will return more in-depth information about the current health status of the system.
      operationId: serverHealth
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    description: One of ok, warn, error.
                    type: string
                    example: warn
                  releaseId:
                    description: Directus version in use.
                    type: string
                    example: 10.0.0
                  serviceId:
                    description: Public URL of the current Directus instance.
                    type: string
                    example: https://directus.example.com
                  checks:
                    description: Array with the status of all individually connected services.
                    type: array
      security: []
      tags:
        - Server
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, serverHealth } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(serverHealth());
        - label: GraphQL
          lang: GraphQL
          source: |
            GET /graphql/system

            type Query {
              server_health: JSON
            }
  /settings:
    get:
      summary: Retrieve Settings
      description: List the settings.
      operationId: getSettings
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Page'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Settings'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Settings
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readSettings } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readSettings());
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Query {\n\tsettings: directus_settings\n}\n"
    patch:
      summary: Update Settings
      description: Update the settings
      operationId: updateSettings
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/Settings'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Settings'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Settings
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateSettings } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateSettings(settings_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            POST /graphql/system

            type Mutation {
              update_settings(data: update_directus_settings_input!): directus_settings
            }
  /shares:
    get:
      summary: List shares
      description: List all shares that exist in Directus.
      operationId: getShares
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Page'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Shares'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Shares
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readShares } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readShares(query_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Query {
              shares: [directus_shares]
            }
    post:
      summary: Create Multiple shares
      description: Create multiple new shares.
      operationId: createShares
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/Shares'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Shares'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Shares
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, createShare } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(createShares(share_object_array));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              create_shares_items(data: [create_directus_shares_input!]!): [directus_shares]
            }
    patch:
      summary: Update Multiple shares
      description: Update multiple shares at the same time.
      operationId: updatesShares
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - keys
                - data
              properties:
                data:
                  $ref: '#/components/schemas/Shares'
                keys:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Shares'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Shares
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateShares } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateShares(share_id_array, partial_share_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              update_shares_items(ids: [ID!]!, data: update_directus_shares_input): [directus_shares]
            }
    delete:
      summary: Delete Multiple shares
      description: Delete multiple existing shares.
      operationId: deleteShares
      requestBody:
        description: An array of share primary keys.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Shares
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deleteShares } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deleteShares(share_id_array));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              delete_shares_items(ids: [ID!]!): delete_many
            }
  /shares/{id}:
    get:
      summary: Retrieve a share
      description: List an existing share by primary key.
      operationId: getShare
      parameters:
        - name: id
          in: path
          description: Unique identifier of the share.
          schema:
            type: string
          required: true
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Shares'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Shares
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readShare } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readShare(share_id, query_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Query {
              shares_by_id(id: ID!): directus_shares
            }
    patch:
      summary: Update a share
      description: Update an existing share.
      operationId: updateShare
      parameters:
        - name: id
          in: path
          description: Unique identifier of the share.
          schema:
            type: string
          required: true
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/Shares'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Shares'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Shares
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateShare } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateShare(share_id, partial_share_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              update_shares_item(id: ID!, data: update_directus_shares_input): directus_shares
            }
    delete:
      summary: Delete an share
      description: Delete an existing share.
      operationId: deleteShare
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the share.
          schema:
            type: string
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Shares
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deleteShare } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deleteShare(share_id));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              delete_shares_item(id: ID!): delete_one
            }
  /shares/auth:
    post:
      summary: Authenticate a Share
      description: Authenticate as a share user. Shares work by returning a token, as it is the case with the regular login endpoint. These tokens are limited to a permissions set that only allows access to the item that was shared, and any relationally linked items that that associated role has access to. This means that all regular endpoints can be used with the token returned by this endpoint.
      operationId: authenticateShare
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - share
              properties:
                share:
                  type: string
                  format: uuid
                  description: Primary key of the share you're authenticating against.
                  example: 3a606c3e-9d4d-4556-b7bb-f00860613da3
                password:
                  type: string
                  format: hash
                  description: Password for the share, if one is configured.
                  example: '**********'
                mode:
                  type: string
                  enum:
                    - json
                    - cookie
                    - session
                  default: json
                  description: Whether to retrieve the refresh token in the JSON response, or in a `httpOnly` cookie.
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        description: 'Temporary access token to be used in follow-up requests. Note: if you used `session` as the mode in the request, the access token won\u0027t be returned in the JSON.'
                        example: eyJhbGciOiJI...
                      expires:
                        type: integer
                        description: How long before the access token will expire. Value is in milliseconds.
                        example: 900
                      refresh_token:
                        type: string
                        description: 'The token that can be used to retrieve a new access token through `/auth/refresh`. Note: if you used `cookie` or `session` as the mode in the request, the refresh token won\u0027t be returned in the JSON.'
                        example: yuOJkjdPXMd...
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Shares
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, authenticateShare } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(authenticateShare('share_key', 'password'));
        - label: GraphQL
          lang: GraphQL
          source: |
            // Not currently available in GraphQL
  /shares/info/{id}:
    get:
      summary: Get Share Public Info
      description: Allows unauthenticated users to retrieve information about the share.
      operationId: getShareInfo
      parameters:
        - name: id
          in: path
          description: Unique identifier of the share.
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Shares'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Shares
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readShareInfo } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readShareInfo(share_id));
        - label: GraphQL
          lang: GraphQL
          source: |
            // Not currently available in GraphQL
  /translations:
    get:
      summary: List Translations
      description: List all Translations that exist in Directus.
      operationId: getTranslations
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Page'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Translations'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Translations
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readTranlations } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readTranslations(query_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            // Not currently available in GraphQL
    post:
      summary: Create Multiple Translations
      description: Create multiple new translations.
      operationId: createTranslations
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/Translations'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Translations'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Translations
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, createtranslations } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(createtranslations(translation_object_array));
        - label: GraphQL
          lang: GraphQL
          source: |
            // Not currently available in GraphQL
    patch:
      summary: Update Multiple Translations
      description: Update multiple Translations at the same time.
      operationId: updateTranslations
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/Translations'
                keys:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Translations'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Translations
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateTranslations } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateTranslations(translation_id_array, partial_translation_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            // Not currently available in GraphQL
    delete:
      summary: Delete Multiple Translations
      description: Delete multiple existing translations.
      operationId: deleteTranslations
      requestBody:
        description: An array of translation primary keys.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Translations
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deleteTranslations } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deleteTranslations(translation_id_array));
        - label: GraphQL
          lang: GraphQL
          source: |
            // Not currently available in GraphQL
  /translations/{id}:
    get:
      summary: Retrieve a Translation
      description: List an existing Translation by primary key.
      operationId: getTranslation
      parameters:
        - name: id
          in: path
          description: Unique identifier of the Translation.
          schema:
            type: string
          required: true
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Translations'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Translations
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readTranslation } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readTranslation(translation_id, query_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            // Not currently available in GraphQL
    patch:
      summary: Update a Translation
      description: Update an existing Translation.
      operationId: updateTranslation
      parameters:
        - name: id
          in: path
          description: Unique identifier of the Translation.
          schema:
            type: string
          required: true
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/Translations'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Translations'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Translations
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateTranslation } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateTranslation(translation_id, partial_translation_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            // Not currently available in GraphQL
    delete:
      summary: Delete an Translation
      description: Delete an existing Translation.
      operationId: deleteTranslation
      parameters:
        - name: id
          in: path
          description: Unique identifier of the Translation.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Translations
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deleteTranslation } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deleteTranslation(translation_id));
        - label: GraphQL
          lang: GraphQL
          source: |
            // Not currently available in GraphQL
  /users:
    get:
      summary: List Users
      description: List all users that exist in Directus.
      operationId: getUsers
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Users'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Users
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readUsers } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readUsers(query_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Query {\n\tusers: [directus_users]\n}\n"
    post:
      summary: Create Multiple Users
      description: Create multiple new users.
      operationId: createUsers
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/Page'
      requestBody:
        description: '`email` and `password` are required.'
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/Users'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Users'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Users
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, createUsers } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(createUsers(user_object_array));
        - label: GraphQL
          lang: GraphQL
          source: |
            POST /graphql/system

            type Mutation {
              create_users_items(data: [create_directus_users_input!]!): [directus_users]
            }
    patch:
      summary: Update Multiple Users
      description: Update multiple users at the same time.
      security: []
      tags:
        - Users
      operationId: updateUsers
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/Users'
                keys:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Users'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateUsers } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateUsers(user_id_array, partial_user_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tupdate_users_items(ids: [ID!]!, data: update_directus_users_input!): [directus_users]\n}\n"
    delete:
      summary: Delete Multiple Users
      description: Delete multiple existing users.
      operationId: deleteUsers
      requestBody:
        description: An array of user primary keys.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security: []
      tags:
        - Users
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deleteUsers } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deleteUsers(user_id_array));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tdelete_users_items(ids: [ID!]!): delete_many\n}\n"
  /users/{id}:
    get:
      summary: Retrieve a User
      description: List an existing user by primary key.
      operationId: getUser
      parameters:
        - $ref: '#/components/parameters/UUId'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Users'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Users
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readUser } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readUser(user_id, query_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Query {\n\tusers_by_id(id: ID!): directus_users\n}\n"
    patch:
      summary: Update a User
      description: Update an existing user
      operationId: updateUser
      parameters:
        - $ref: '#/components/parameters/UUId'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Users'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
          description: Successful request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Users
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateUser } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateUser(user_id, partial_user_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tupdate_users_item(id: ID!, data: update_directus_users_input!): directus_users\n}\n"
    delete:
      summary: Delete a User
      description: Delete an existing user
      operationId: deleteUser
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/UUId'
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deleteUser } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deleteUser(user_id));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tdelete_users_item(id: ID!): delete_one\n}\n"
  /users/invite:
    post:
      summary: Invite User
      description: Invites a user to this project. It creates a user with an invited status, and then sends an email to the user with instructions on how to activate their account.
      operationId: invite
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - role
              properties:
                email:
                  type: string
                  description: Email address of the to-be-invited user.
                role:
                  description: Role of the new user
                  type: string
                invite_url:
                  description: 'Provide a custom invite url which the link in the email will lead to. The invite token will be passed as a parameter. Note: You need to configure the USER_INVITE_URL_ALLOW_LIST environment variable to enable this feature.'
                  type: string
                  format: url
      responses:
        '204':
          description: Successful request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Users
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, inviteUser } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(inviteUser('another@example.com', 'c86c2761-65d3-43c3-897f-6f74ad6a5bd7'));
        - label: GraphQL
          lang: GraphQL
          source: |
            POST /graphql/system

            type Mutation {
              users_invite(email: String!, role: String!, invite_url: String): Boolean
            }
  /users/invite/accept:
    post:
      summary: Accept User Invite
      description: Accept your invite. The invite user endpoint sends the email a link to the Data Studio. This link includes a token, which is then used to activate the invited user.
      operationId: acceptInvite
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - password
              properties:
                token:
                  type: string
                  example: eyJh...KmUk
                  description: Accept invite token.
                password:
                  type: string
                  description: Password of the user.
                  format: password
                  example: d1r3ctu5
      responses:
        '204':
          description: Successful request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Users
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, acceptUserInvite } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(acceptUserInvite(invite_token, user_password));
        - label: GraphQL
          lang: GraphQL
          source: |
            type Mutation {
              users_invite_accept(token: String!, password: String!): Boolean
            }
  /users/me:
    get:
      summary: Retrieve Current User
      description: Retrieve the currently authenticated user.
      operationId: getMe
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Users'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Users
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readMe } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readMe(query_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Query {\n\tusers_me: directus_users\n}\n"
    patch:
      summary: Update Current User
      description: Update the currently authenticated user.
      operationId: updateMe
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Users'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Users
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateMe } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateMe(partial_user_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tupdate_users_me(data: update_directus_users_input!): directus_users\n}\n"
  /users/me/tfa/disable:
    post:
      summary: Disable Two-Factor Authentication
      description: Disables two-factor authentication for the currently authenticated user.
      operationId: meTfaDisable
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - otp
              properties:
                otp:
                  description: One-time password generated by the authenticator app.
                  type: string
      responses:
        '204':
          description: Successful request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Users
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, disableTwoFactor } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(disableTwoFactor(otp));
        - label: GraphQL
          lang: GraphQL
          source: |
            POST /graphql/system

            type Mutation {
              users_me_tfa_disable(otp: String!): Boolean
            }
  /users/me/tfa/enable:
    post:
      summary: Enable 2FA
      description: Enables two-factor authentication for the currently authenticated user.
      operationId: meTfaEnable
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - secret
                - otp
              properties:
                secret:
                  description: The TFA secret from tfa/generate.
                  type: string
                otp:
                  description: OTP generated with the secret, to recheck if the user has a correct TFA setup
                  type: string
      responses:
        '204':
          description: Successful request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Users
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, enableTwoFactor } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(enableTwoFactor(secret, otp));
        - label: GraphQL
          lang: GraphQL
          source: |
            POST /graphql/system

            type Mutation {
              users_me_tfa_enable(otp: String!, secret: String!): Boolean
            }
  /users/me/tfa/generate:
    post:
      summary: Generate Two-Factor Authentication Secret
      description: Generates a secret and returns the URL to be used in an authenticator app.
      operationId: generateTwoFactorSecret
      requestBody:
        content:
          application/json:
            schema:
              type: string
              required:
                - password
              properties:
                password:
                  description: The user's password.
                  type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  secret:
                    type: string
                    description: OTP secret to be saved in the authenticator app.
                  otpauth_url:
                    type: string
                    description: otpauth:// formatted URL. Can be rendered as QR code and used in most authenticator apps.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Users
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, generateTwoFactorSecret } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(generateTwoFactorSecret(user_password));
        - label: GraphQL
          lang: GraphQL
          source: |
            POST /graphql/system

            type Mutation {
              users_me_tfa_generate(password: String!): users_me_tfa_generate_data
            }
  /users/me/track/page:
    patch:
      summary: Update Last Page
      description: Updates the last used page field of the currently authenticated user. This is used internally to be able to open the Directus admin app from the last page you used.
      operationId: updateLastUsedPageMe
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                last_page:
                  type: string
                  description: Path of the page you used last.
      responses:
        '200':
          description: Successful request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Users
  /users/register:
    post:
      summary: Register a new User
      description: Register a new user.
      operationId: registerUser
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  description: Email for the new user.
                password:
                  type: string
                  description: Password for the new user.
                first_name:
                  type: string
                  description: First name for the new user.
                last_name:
                  type: string
                  description: Last name for the new user.
                verification_url:
                  type: string
                  description: 'Provide a custom verification url which the link in the email will lead to. The verification token will be passed as a parameter. Note: You need to configure the USER_REGISTER_URL_ALLOW_LIST environment variable to enable this feature.'
      responses:
        '204':
          description: Successful request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Users
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, registerUser } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            await client.request(registerUser(user_email, user_password));
        - label: GraphQL
          lang: GraphQL
          source: |
            POST /graphql/system

            type Mutation {
              users_register(email: String!, password: String!): True
            }
  /users/register/verify-email/{token}:
    get:
      summary: Verify Registered Email
      description: Verify the registered email address. The register user endpoint sends the email a link for verification. This link includes a token, which is then used to activate the registered user.
      operationId: registerUserVerify
      parameters:
        - description: Emailed registration token.
          in: path
          name: token
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Users
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, verifyUserEmail } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            await client.request(registerUserVerify(emailed_token));
        - label: GraphQL
          lang: GraphQL
          source: |
            POST /graphql/system

            type Mutation {
              users_register_verify(token: String!): True
            }
  /utils/cache/clear:
    post:
      summary: Clear the Internal Cache
      description: Resets the data cache of Directus. Optionally, can also clear system cache. This endpoint is only available to admin users.
      operationId: clear-cache
      responses:
        '200':
          description: Successful request
      security: []
      tags:
        - Utilities
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, clearCache } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(clearCache());
        - label: GraphQL
          lang: GraphQL
          source: |
            mutation {
              utils_cache_clear
            }
  /utils/export/{collection}:
    post:
      summary: Export Data to a File
      description: Export a larger data set to a file in the file library.
      operationId: export
      parameters:
        - description: Collection identifier
          in: path
          name: collection
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                format:
                  type: string
                  description: What file format to save the export to. One of `csv`, `xml`,`json`
                  enum:
                    - csv
                    - xml
                    - json
                query:
                  $ref: '#/components/schemas/Query'
                file:
                  $ref: '#/components/schemas/Files'
              required:
                - format
                - query
                - file
      responses:
        '200':
          description: Successful request
      security: []
      tags:
        - Utilities
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: "import { createDirectus, rest, utilsExport } from '@directus/sdk';\n\nconst client = createDirectus('directus_project_url').with(rest());\n\nconst result = await client.request(\n\tutilsExport(\n\t\t'collection_name',\n\t\t'file_format',\n\t\t{\n\t\t\tquery_type: {\n\t\t\t\tfield: {\n\t\t\t\t\tquery_operation: 'value',\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tfile: {\n\t\t\t\tfile_field: 'value',\n\t\t\t},\n\t\t}\n\t)\n);\n"
        - label: GraphQL
          lang: GraphQL
          source: |
            // Not currently available in GraphQL
  /utils/hash/generate:
    post:
      summary: Generate a Hash.
      description: Generate a hash for a given string.
      operationId: hash-generate
      requestBody:
        content:
          application/json:
            schema:
              properties:
                string:
                  type: string
                  description: String to hash.
              required:
                - string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: $argon2i$v=19$m=4096,t=3,p=1$pOyIa/zmRAjCVLb2f7kOyg$DasoO6LzMM+6iKfzCDq6JbsYsZWLSm33p7i9NxL9mDc
          description: Successful request
      security: []
      tags:
        - Utilities
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, generateHash } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(generateHash(string_to_hash));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tutils_hash_generate(string: String!): String\n}\n"
  /utils/hash/verify:
    post:
      summary: Verify a Hash.
      description: Verify a string with a hash.
      operationId: hash-verify
      requestBody:
        content:
          application/json:
            schema:
              properties:
                string:
                  type: string
                  description: String to hash.
                hash:
                  type: string
                  description: Hash you want to verify against.
              required:
                - string
                - hash
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: boolean
                    example: true
          description: Successful request
      security: []
      tags:
        - Utilities
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, verifyHash } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(verifyHash(string_to_verify, hash));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tutils_hash_verify(hash: String!, string: String!): Boolean\n}\n"
  /utils/import/{collection}:
    post:
      summary: Import Data from File
      description: Import multiple records from a JSON or CSV file into a collection.
      operationId: import
      parameters:
        - description: Collection identifier
          in: path
          name: collection
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Successful request
      security: []
      tags:
        - Utilities
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, utilsImport } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const formData = new FormData();
            formData.append('file', raw_file);

            const result = await client.request(utilsImport(formData));
        - label: GraphQL
          lang: GraphQL
          source: |
            // Not currently available in GraphQL
  /utils/random/string:
    get:
      summary: Get a Random String
      description: Returns a random string of given length.
      operationId: random
      parameters:
        - description: Length of the random string.
          in: query
          name: length
          required: false
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: 1>M3+4oh.S
          description: Successful request
      security: []
      tags:
        - Utilities
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, randomString } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(randomString(length));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tutils_random_string(length: Int): String\n}\n"
  /utils/sort/{collection}:
    post:
      summary: Manually Sort Items in Collection
      description: Re-sort items in collection based on start and to value of item
      operationId: sort
      parameters:
        - description: Collection identifier
          in: path
          name: collection
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                item:
                  type: number
                  description: Primary key of item to move
                to:
                  type: number
                  description: Primary key of item where to move the current item to
      responses:
        '200':
          description: Successful request
      security: []
      tags:
        - Utilities
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, utilitySort } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(utilitySort(collection_name, id_item_to_move, id_item_moving_to));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tutils_sort(collection: String!, item: ID!, to: ID!): Boolean\n}\n"
  /versions:
    get:
      summary: List Content Versions
      description: List all Content Versions that exist in Directus.
      operationId: getContentVersions
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Versions'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Versions
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readContentVersions } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readContentVersions(query_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Query {\n\tversions: [directus_versions]\n}\n"
    post:
      summary: Create Multiple Content Versions
      description: Create multiple new Content Versions.
      operationId: createContentVersions
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/Versions'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Versions'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security: []
      tags:
        - Versions
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateContentVersions } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateContentVersions(content_version_id_array, partial_content_version_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tupdate_versions_items(ids: [ID!]!, data: update_directus_versions_input!): [directus_versions]\n}\n"
    patch:
      summary: Update Multiple Content Versions
      description: Update multiple Content Versions at the same time.
      operationId: updateContentVersions
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Meta'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Search'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - data
                - keys
              properties:
                data:
                  anyOf:
                    - $ref: '#/components/schemas/Versions'
                keys:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Versions'
                  meta:
                    $ref: '#/components/schemas/x-metadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security: []
      tags:
        - Versions
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateContentVersions } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateContentVersions(content_version_id_array, partial_content_version_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tupdate_versions_items(ids: [ID!]!, data: update_directus_versions_input!): [directus_versions]\n}\n"
    delete:
      summary: Delete Multiple Content Versions
      description: Delete multiple existing Content Versions.
      operationId: deleteContentVersions
      requestBody:
        description: An array of content version primary keys.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security: []
      tags:
        - Versions
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deleteContentVersions } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deleteContentVersions(content_version_id_array));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tdelete_versions_items(ids: [ID!]!): delete_many\n}\n"
  /versions/{id}:
    get:
      summary: Retrieve a Content Version
      description: Retrieve a single Content Version by unique identifier.
      operationId: getContentVersion
      parameters:
        - $ref: '#/components/parameters/UUId'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Versions'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Versions
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, readContentVersion } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(readContentVersion(content_version_id, query_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Query {\n\tversions_by_id(id: ID!): directus_versions\n}\n"
    patch:
      summary: Update a Content Version
      description: Update an existing Content Version.
      operationId: updateContentVersion
      parameters:
        - $ref: '#/components/parameters/UUId'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Meta'
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/Versions'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Versions'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Versions
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, updateContentVersion } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(updateContentVersion(content_version_id, partial_content_version_object));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tupdate_versions_item(id: ID!, data: update_directus_versions_input!): directus_versions\n}\n"
    delete:
      summary: Delete a Content Version
      description: Delete an existing Content Version.
      operationId: deleteContentVersion
      responses:
        '204':
          description: The resource was deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Versions
      parameters:
        - $ref: '#/components/parameters/UUId'
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, deleteContentVersion } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(deleteContentVersion(content_version_id));
        - label: GraphQL
          lang: GraphQL
          source: "POST /graphql/system\n\ntype Mutation {\n\tdelete_versions_item(id: ID!): delete_one\n}\n"
  /versions/{id}/compare:
    get:
      summary: Compare a Content Version
      description: Compare an existing Content Version with the main version of the item.
      operationId: compareContentVersion
      parameters:
        - $ref: '#/components/parameters/UUId'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
          description: Successful request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Versions
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, compareContentVersion } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(compareContentVersion(content_version_id));
        - label: GraphQL
          lang: GraphQL
          source: |
            // Not supported in GraphQL
  /versions/{id}/promote:
    post:
      summary: Promote a Content Version
      description: Promote an existing Content Version to become the new main version of the item.
      operationId: promoteContentVersion
      parameters:
        - $ref: '#/components/parameters/UUId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                mainHash:
                  type: string
                  description: Hash of the main version of the item to be promoted.
                fields:
                  type: string
                  description: Optional array of field names of which the values are to be promoted.
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: string
                description: The primary key of the promoted item.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Versions
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, promoteContentVersion } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(promoteContentVersion(content_version_id, promote_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            // Not supported in GraphQL
  /versions/{id}/save:
    post:
      summary: Save to a Content Version
      description: Save item changes to an existing Content Version.
      operationId: saveContentVersion
      parameters:
        - $ref: '#/components/parameters/UUId'
      responses:
        '200':
          description: Successful request, Returns the item object with the new state after save.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Items'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security: []
      tags:
        - Versions
      x-codeSamples:
        - label: Directus SDK
          lang: JavaScript
          source: |
            import { createDirectus, rest, saveToContentVersion } from '@directus/sdk';

            const client = createDirectus('directus_project_url').with(rest());

            const result = await client.request(saveToContentVersion(content_version_id, partial_item_object));
        - label: GraphQL
          lang: GraphQL
          source: |
            // Not supported in GraphQL
components:
  parameters:
    Fields:
      description: Control what fields are being returned in the object.
      in: query
      name: fields
      required: false
      explode: false
      schema:
        type: array
        items:
          type: string
    Limit:
      description: A limit on the number of objects that are returned.
      in: query
      name: limit
      required: false
      schema:
        type: integer
    Meta:
      description: What metadata to return in the response.
      in: query
      name: meta
      required: false
      schema:
        type: string
    Offset:
      description: How many items to skip when fetching data.
      in: query
      name: offset
      required: false
      schema:
        type: integer
    Sort:
      description: How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.
      in: query
      name: sort
      required: false
      explode: false
      schema:
        type: array
        items:
          type: string
    Filter:
      description: Select items in collection by given conditions.
      in: query
      name: filter
      required: false
      content:
        application/json:
          schema:
            type: object
            example:
              <field>:
                <operator>: <value>
    Search:
      description: Filter by items that contain the given search query in one of their fields.
      in: query
      name: search
      required: false
      schema:
        type: string
    Id:
      description: Identifier for the object.
      name: id
      in: path
      required: true
      schema:
        type: integer
    Page:
      description: Cursor for use in pagination. Often used in combination with limit.
      in: query
      name: page
      required: false
      schema:
        type: integer
    UUId:
      description: Unique identifier for the object.
      name: id
      in: path
      required: true
      schema:
        example: 8cbb43fe-4cdf-4991-8352-c461779cec02
        type: string
    Collection:
      description: Collection of which you want to retrieve the items from.
      name: collection
      in: path
      required: true
      schema:
        type: string
    Version:
      name: version
      description: Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version.
      in: query
      required: false
      schema:
        type: string
    Export:
      name: export
      description: Saves the API response to a file. Accepts one of `csv`, `json`, `xml`, `yaml`.
      in: query
      required: false
      schema:
        type: string
        enum:
          - csv
          - json
          - xml
          - yaml
  responses:
    UnauthorizedError:
      description: 'Error: Unauthorized request'
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  code:
                    type: integer
                    format: int64
                  message:
                    type: string
    NotFoundError:
      description: 'Error: Not found.'
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  code:
                    type: integer
                    format: int64
                  message:
                    type: string
  securitySchemes:
    KeyAuth:
      type: apiKey
      in: query
      name: access_token
    Auth:
      type: apiKey
      in: header
      name: Authorization
  schemas:
    Folders:
      type: object
      properties:
        id:
          description: Unique identifier for the folder.
          example: 0cf0e03d-4364-45df-b77b-ca61f61869d2
          type: string
          format: uuid
        name:
          description: Name of the folder.
          example: New York
          type: string
        parent:
          description: Unique identifier of the parent folder. This allows for nested folders.
          example: |
            {
              "data": {
                "id": "fc02d733-95b8-4e27-bd4b-08a32cbe4e66",
                "name": "Test",
                "parent": null
              }
            }
          type: string
          oneOf:
            - $ref: '#/components/schemas/Folders'
          nullable: true
      x-collection: directus_folders
    Users:
      type: object
      properties:
        id:
          description: Unique identifier for the user.
          example: 63716273-0f29-4648-8a2a-2af2948f6f78
          type: string
        first_name:
          description: First name of the user.
          example: Admin
          type: string
        last_name:
          description: Last name of the user.
          example: User
          type: string
        email:
          description: Unique email address for the user.
          example: admin@example.com
          type: string
          format: email
        password:
          description: Password of the user.
          type: string
          format: string
        location:
          description: The user's location.
          example: null
          type: string
          nullable: true
        title:
          description: The user's title.
          example: null
          type: string
          nullable: true
        description:
          description: The user's description.
          example: null
          type: string
          nullable: true
        tags:
          description: The user's tags.
          example: null
          type: array
          nullable: true
          items:
            type: string
        avatar:
          description: The user's avatar. Many-to-one to files.
          example: null
          type: string
          oneOf:
            - $ref: '#/components/schemas/Files'
          nullable: true
        language:
          description: The user's language used in Directus. Language the Data Studio is rendered in. See our Crowdin page for all available languages and translations.
          example: en-US
          type: string
        tfa_secret:
          description: The 2FA secret string that's used to generate one time passwords.
          example: null
          type: string
          nullable: true
        status:
          description: Status of the user.
          example: active
          type: string
          enum:
            - active
            - invited
            - draft
            - suspended
            - deleted
        role:
          description: Unique identifier of the role of this user. Many-to-one to roles.
          example: 2f24211d-d928-469a-aea3-3c8f53d4e426
          type: string
          oneOf:
            - $ref: '#/components/schemas/Roles'
        token:
          description: Static token for the user.
          type: string
          nullable: true
        policies:
          nullable: true
          description: The policies associated with this user. Many-to-many to policies.
          example: 2f24211d-d928-469a-aea3-3c8f53d4e426
          type: string
          oneOf:
            - $ref: '#/components/schemas/Policies'
        last_access:
          description: When this user used the API last.
          example: '2020-05-31T14:32:37Z'
          type: string
          nullable: true
          format: date-time
        last_page:
          description: Last page that the user was on.
          example: /my-project/settings/collections/a
          type: string
          nullable: true
        provider:
          description: What auth provider was used to register this user.
          nullable: false
          type: string
        external_identifier:
          description: Primary key of the user in the third party authentication provider, if used.
          nullable: true
          type: string
        auth_data:
          description: Required data about the user as provided by the third party auth provider, if used.
          nullable: true
          type: object
        email_notifications:
          description: When this is enabled, the user will receive emails for notifications.
          nullable: true
          type: boolean
        appearance:
          description: One of auto, light, dark.
          nullable: true
          type: string
          enum:
            - auto
            - light
            - dark
        theme_dark:
          description: Theme to use in dark mode.
          nullable: true
          type: string
        theme_light:
          description: Theme to use in light mode.
          nullable: true
          type: string
        theme_light_overrides:
          description: Customization for light theme in use.
          nullable: true
          type: object
        theme_dark_overrides:
          description: Customization for dark theme in use.
          nullable: true
          type: object
      x-collection: directus_users
    Files:
      type: object
      properties:
        id:
          description: Unique identifier for the file.
          example: 8cbb43fe-4cdf-4991-8352-c461779cec02
          type: string
          format: uuid
        storage:
          description: Where the file is stored. Either `local` for the local filesystem or the name of the storage adapter (for example `s3`).
          example: local
          type: string
        filename_disk:
          description: Name of the file on disk. By default, Directus uses a random hash for the filename.
          example: a88c3b72-ac58-5436-a4ec-b2858531333a.jpg
          type: string
        filename_download:
          description: How you want to the file to be named when it's being downloaded.
          example: avatar.jpg
          type: string
        title:
          description: Title for the file. Is extracted from the filename on upload, but can be edited by the user.
          example: User Avatar
          type: string
        type:
          description: MIME type of the file.
          example: image/jpeg
          type: string
        folder:
          description: Virtual folder where this file resides in.
          example: null
          type: string
          oneOf:
            - $ref: '#/components/schemas/Folders'
          nullable: true
        uploaded_by:
          description: Who uploaded the file.
          example: 63716273-0f29-4648-8a2a-2af2948f6f78
          oneOf:
            - type: string
            - $ref: '#/components/schemas/Users'
        created_on:
          description: When the file was created.
          example: '2019-12-03T00:10:15+00:00'
          type: string
          format: date-time
        modified_by:
          type: string
          format: uuid
          oneOf:
            - $ref: '#/components/schemas/Users'
          nullable: true
        modified_on:
          nullable: false
          type: string
          format: date-time
        charset:
          description: Character set of the file.
          example: binary
          type: string
          nullable: true
        filesize:
          description: Size of the file in bytes.
          example: 137862
          type: integer
        width:
          description: Width of the file in pixels. Only applies to images.
          example: 800
          type: integer
          nullable: true
        height:
          description: Height of the file in pixels. Only applies to images.
          example: 838
          type: integer
          nullable: true
        duration:
          description: Duration of the file in seconds. Only applies to audio and video.
          example: 0
          type: integer
          nullable: true
        embed:
          description: Where the file was embedded from.
          example: null
          type: string
          nullable: true
        description:
          description: Description for the file.
          type: string
          nullable: true
        location:
          description: Where the file was created. Is automatically populated based on Exif data for images.
          type: string
          nullable: true
        tags:
          description: Tags for the file. Is automatically populated based on Exif data for images.
          type: array
          nullable: true
          items:
            type: string
        metadata:
          description: IPTC, Exif, and ICC metadata extracted from file
          type: object
          nullable: true
        focal_point_x:
          nullable: true
          type: integer
        focal_point_y:
          nullable: true
          type: integer
        uploaded_on:
          description: When the file was last uploaded/replaced.
          example: '2019-12-03T00:10:15+00:00'
          type: string
          format: date-time
      x-collection: directus_files
    Roles:
      type: object
      properties:
        id:
          description: Unique identifier for the role.
          example: 2f24211d-d928-469a-aea3-3c8f53d4e426
          type: string
          format: uuid
        name:
          description: Name of the role.
          example: Administrator
          type: string
        icon:
          description: The role's icon.
          example: verified_user
          type: string
        description:
          description: Description of the role.
          example: Admins have access to all managed data within the system by default
          type: string
          nullable: true
        parent:
          nullable: true
          description: Optional parent role that this role inherits permissions from. Many-to-one to roles.
          type: string
          format: uuid
          oneOf:
            - $ref: '#/components/schemas/Roles'
        children:
          nullable: true
          description: Nested child roles that inherit this roles permissions. One-to-many to roles. One-to-many to roles.
          type: array
          format: uuid
          items:
            oneOf:
              - $ref: '#/components/schemas/Roles'
        policies:
          nullable: true
          description: The policies in this role. Many-to-many to roles.
          type: array
          format: uuid
          items:
            oneOf:
              - $ref: '#/components/schemas/Roles'
        users:
          nullable: true
          description: The users in this role. One-to-many to users.
          type: array
          format: uuid
          items:
            oneOf:
              - $ref: '#/components/schemas/Users'
      x-collection: directus_roles
    Policies:
      type: object
      properties:
        id:
          description: Primary key of the policy;
          example: 22640672-eef0-4ee9-ab04-591f3afb288
          type: string
          format: uuid
        name:
          description: Name of the policy.
          example: Admin
          type: string
        icon:
          description: Icon for the policy. Displayed in the Data Studio.
          example: supervised_user_circle
          type: string
        description:
          description: Description for the policy. Displayed in the Data Studio.
          example: null
          type: string
        ip_access:
          description: A CSV of IP addresses that this policy applies to. Allows you to configure an allowlist of IP addresses. If empty, no IP restrictions are applied.
          example: null
          type: string
          format: csv
        enforce_tfa:
          description: Whether or not Two-Factor Authentication is required for users that have this policy.
          example: false
          type: boolean
        admin_access:
          description: If this policy grants the user admin access. This means that users with this policy have full permissions to everything.
          example: true
          type: boolean
        app_access:
          description: Whether or not users with this policy have access to use the Data Studio.
          example: true
          type: boolean
        users:
          description: The users this policy is assigned to directly, this does not include users which receive this policy through a role. It expects and returns data from the directus_access collection. Many-to-many to users via access.
          example:
            - 0bc7b36a-9ba9-4ce0-83f0-0a526f354e07
          oneOf:
            - type: array
            - format: many-to-many
            - $ref: '#/components/schemas/Users'
        roles:
          description: The roles this policy is assigned to. It expects and returns data from the directus_access collection. Many-to-many to roles via access.
          example:
            - 8b4474c0-288d-4bb8-b62e-8330646bb6aa
          oneOf:
            - type: array
            - format: many-to-many
            - $ref: '#/components/schemas/Roles'
        permissions:
          description: The permissions assigned to this policy. One-to-many to permissions.
          example:
            - 5c74c86f-cab0-4b14-a3c4-cd4f2363e826
          oneOf:
            - type: array
            - format: one-to-many
            - $ref: '#/components/schemas/Permissions'
      x-collection: directus_policies
    Permissions:
      type: object
      properties:
        id:
          description: Unique identifier for the permission.
          example: 1
          type: integer
        collection:
          description: What collection this permission applies to.
          example: customers
          type: string
        action:
          description: What action this permission applies to.
          example: create
          type: string
          enum:
            - create
            - read
            - update
            - delete
        permissions:
          description: JSON structure containing the permissions checks for this permission.
          type: object
          nullable: true
        validation:
          description: JSON structure containing the validation checks for this permission.
          type: object
          nullable: true
        presets:
          description: JSON structure containing the preset value for created/updated items.
          type: object
          nullable: true
        fields:
          description: CSV of fields that the user is allowed to interact with.
          type: array
          items:
            type: string
          nullable: true
        policy:
          description: Policy this permission applies to. Many-to-one to policies.
          nullable: false
          format: uuid
          type: string
          oneOf:
            - $ref: '#/components/schemas/Policies'
      x-collection: directus_permissions
    Collections:
      type: object
      properties:
        collection:
          description: Name of the collection. This matches the table name in the database.
          example: customers
          type: string
        icon:
          nullable: true
          description: Icon displayed in the Data Studio when working with this collection.
          type: string
        note:
          nullable: true
          description: Short description displayed in the Data Studio.
          type: string
        display_template:
          nullable: true
          description: How items in this collection should be displayed when viewed relationally in the Data Studio.
          type: string
        hidden:
          nullable: false
          description: Whether or not this collection is hidden in the Data Studio.
          type: boolean
        singleton:
          nullable: false
          description: Whether or not this collection is treated as a singleton.
          type: boolean
        translations:
          description: How this collection's name is displayed in the different languages in the Data Studio.
          type: array
          nullable: true
        archive_field:
          description: What field in the collection holds the archived state.
          nullable: true
          type: string
        archive_app_filter:
          nullable: false
          type: boolean
        archive_value:
          nullable: true
          description: What value the archive field should be set to when archiving an item.
          type: string
        unarchive_value:
          nullable: true
          description: What value the archive field should be set to when unarchiving an item.
          type: string
        sort_field:
          nullable: true
          description: What field holds the sort value on the collection. The Data Studio uses this to allow drag-and-drop manual sorting.
          type: string
        accountability:
          nullable: true
          description: What data is tracked. One of `all`, `activity`.
          type: string
        item_duplication_fields:
          nullable: true
          description: What fields are duplicated during "Save as copy" action of an item in this collection.
          type: array
        sort:
          nullable: true
          description: What sort order of the collection relative to other collections of the same level.
          type: integer
        group:
          nullable: true
          description: The name of the parent collection.
          type: string
          oneOf:
            - $ref: '#/components/schemas/Collections'
        collapse:
          nullable: false
          description: What is the default behavior of this collection or "folder" collection when it has nested collections. One of `open`, `closed`, `locked`.
          type: string
        versioning:
          nullable: false
          description: Whether or not Content Versioning is enabled for this collection.
          type: boolean
      x-collection: directus_collections
    Activity:
      type: object
      properties:
        id:
          description: Unique identifier for the object.
          example: 2
          type: integer
        action:
          description: Action that was performed.
          example: update
          type: string
          enum:
            - create
            - update
            - delete
            - login
        user:
          description: The user who performed this action. Many-to-one to users.
          type: string
          oneOf:
            - $ref: '#/components/schemas/Users'
          nullable: true
        timestamp:
          description: When the action happened.
          example: '2019-12-05T22:52:09Z'
          type: string
          format: date-time
        ip:
          description: The IP address of the user at the time the action took place.
          example: 127.0.0.1
          oneOf:
            - type: string
            - format: ipv4
        user_agent:
          description: User agent string of the browser the user used when the action took place.
          example: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_1) AppleWebKit/537.36 (KHTML,like Gecko) Chrome/78.0.3904.108 Safari/537.36
          type: string
        collection:
          description: Collection identifier in which the item resides.
          oneOf:
            - type: string
            - $ref: '#/components/schemas/Collections'
        item:
          description: Unique identifier for the item the action applied to. This is always a string, even for integer primary keys.
          example: '328'
          type: string
        comment:
          description: User comment. This will store the comments that show up in the right sidebar of the item edit page in the admin app.
          example: null
          type: string
          nullable: true
        origin:
          description: Origin of the request when the action took place.
          example: https://directus.io
          type: string
        revisions:
          description: Any changes that were made in this activity. One-to-many to revisions.
          nullable: true
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Revisions'
      x-collection: directus_activity
    Items:
      type: object
      properties:
        id:
          description: Unique identifier for the item.
          example: 2
          type: integer
      x-collection: directus_items
    Versions:
      type: object
      properties:
        id:
          description: Primary key of the Content Version.
          example: 63716273-0f29-4648-8a2a-2af2948f6f78
          type: string
        key:
          description: Key of the Content Version, used as the value for the "version" query parameter.
          example: draft
          type: string
        name:
          description: Descriptive name of the Content Version.
          example: My Draft
          type: string
        collection:
          description: Name of the collection the Content Version is created on.
          example: articles
          type: string
          oneOf:
            - $ref: '#/components/schemas/Collections'
        item:
          description: The item the Content Version is created on. Many-to-one to items.
          example: '168'
          type: string
          oneOf:
            - $ref: '#/components/schemas/Items'
        hash:
          nullable: true
          type: string
        date_created:
          description: When the Content Version was created.
          type: string
          example: '2022-05-11T13:14:52Z'
          format: date-time
          nullable: true
        date_updated:
          description: When the Content Version was updated.
          type: string
          example: '2022-05-11T13:14:53Z'
          format: date-time
          nullable: true
        user_created:
          description: User that created the Content Version. Many-to-one to users.
          example: 63716273-0f29-4648-8a2a-2af2948f6f78
          type: string
          oneOf:
            - $ref: '#/components/schemas/Users'
        user_updated:
          description: User that updated the Content Version. Many-to-one to users.
          example: 63716273-0f29-4648-8a2a-2af2948f6f78
          type: string
          oneOf:
            - $ref: '#/components/schemas/Users'
        delta:
          description: The current changes compared to the main version of the item.
          type: object
      x-collection: directus_versions
    Revisions:
      type: object
      properties:
        id:
          description: Unique identifier for the revision.
          example: 1
          type: integer
        activity:
          description: Unique identifier for the activity record. Many-to-one to activity.
          example: 2
          type: integer
          oneOf:
            - $ref: '#/components/schemas/Activity'
        collection:
          description: Collection of the updated item.
          example: articles
          type: string
          oneOf:
            - $ref: '#/components/schemas/Collections'
        item:
          description: Primary key of updated item.
          example: '168'
          type: string
        data:
          description: Copy of item state at time of update.
          example:
            author: 1
            body: This is my first post
            featured_image: 15
            id: '168'
            title: Hello, World!
          type: object
          nullable: true
        delta:
          description: Changes between the previous and the current revision.
          example:
            title: Hello, World!
          type: object
        parent:
          description: If the current item was updated relationally, this is the id of the parent revision record. Many-to-one to revisions.
          example: null
          type: integer
          nullable: true
        version:
          description: Associated version of this revision. Many-to-one to versions.
          example: draft
          type: string
          oneOf:
            - $ref: '#/components/schemas/Versions'
      x-collection: directus_revisions
    x-metadata:
      type: object
      properties:
        total_count:
          description: Returns the total item count of the collection you're querying.
          type: integer
        filter_count:
          description: Returns the item count of the collection you're querying, taking the current filter/search parameters into account.
          type: integer
    Comments:
      type: object
      properties:
        collection:
          description: Collection identifier in which the item resides.
          example: articles
          type: string
        id:
          description: Unique identifier for the object.
          example: 2fab3b9d-0543-4b87-8a30-3c5ee66fedf1
          type: string
          format: uuid
        item:
          description: The item the comment is created for.
          example: 15
          type: string
        comment:
          description: User comment. This will store the comments that show up in the right sidebar of the item edit page in the Data Studio.
          example: This is a comment on an article
          type: string
        date_created:
          description: Timestamp in ISO8601 when the comment was created.
          example: '2023-01-15T09:14:52Z'
          type: string
          format: date-time
        date_updated:
          description: Timestamp in ISO8601 when the comment was last updated.
          example: '2023-01-15T09:00:00Z'
          type: string
          format: date-time
        user_created:
          description: The user who created the comment. Many-to-one to users.
          example: 12e62fd0-29c7-4fd3-b3d3-c7a39933e8af
          type: string
          oneOf:
            - $ref: '#/components/schemas/Users'
        user_updated:
          description: The user who last updated the comment. Many-to-one to users.
          example: 12e62fd0-29c7-4fd3-b3d3-c7a39933e8af
          type: string
          oneOf:
            - $ref: '#/components/schemas/Users'
      x-collection: directus_comments
    Dashboards:
      type: object
      properties:
        id:
          description: Primary key of the dashboard;
          example: a79bd1b2-beb2-49fc-8a26-0b3eec0e2697
          type: string
          format: uuid
        name:
          description: Name of the dashboard.
          example: My dashboard
          type: string
        icon:
          description: Material icon for dashboard.
          example: space_dashboard
          type: string
        note:
          description: Descriptive text about the dashboard.
          example: Test
          type: string
        date_created:
          description: When the dashboard was created.
          example: '2023-01-25T19:16:49.009Z'
          type: string
          format: date-time
        user_created:
          description: User that created the dashboard. Many-to-one to users.
          example: fd066644-c8e5-499d-947b-fe6c6e1a1473
          type: string
          format: relation
          oneOf:
            - $ref: '#/components/schemas/Users'
        color:
          description: Accent color for the dashboard.
          example: null
          type: string
          format: hexcode
        panels:
          description: Panels that are in this dashboard. One-to-may to panels.
          example: 22640672-eef0-4ee9-ab04-591f3afb2883
          type: string
          oneOf:
            - $ref: '#/components/schemas/Panels'
      x-collection: directus_shares
    Panels:
      type: object
      properties:
        id:
          description: Primary key of the panel.
          example: 22640672-eef0-4ee9-ab04-591f3afb288
          type: string
          format: uuid
        dashboard:
          description: Dashboard where this panel is visible. Many-to-one to dashboards.
          example: a79bd1b2-beb2-49fc-8a26-0b3eec0e269
          oneOf:
            - type: string
            - $ref: '#/components/schemas/Dashboards'
        name:
          description: Name of the panel.
          example: 30-day sales
          type: string
        icon:
          description: Material design icon for the panel.
          example: paid
          type: string
        color:
          description: Accent color of the panel.
          example: null
          type: string
          format: hexcode
        show_header:
          description: Whether or not the header should be rendered for this panel.
          example: true
          type: boolean
        note:
          description: Description for the panel.
          example: Overview of the sales numbers in the last 30 day
          type: string
        type:
          description: The panel type used for this panel.
          example: time-series
          type: string
        position_x:
          description: The X position on the workspace grid.
          example: 1
          type: integer
        position_y:
          description: The Y position on the workspace grid.
          example: 1
          type: integer
        width:
          description: Width of the panel in number of workspace dots.
          example: 1
          type: integer
        height:
          description: Height of the panel in number of workspace dots.
          example: 1
          type: integer
        options:
          description: Description for the panel.
          example: {}
          type: object
        date_created:
          description: When the panel was created
          example: '2023-01-05T19:05:51.884Z'
          type: string
          format: date-time
        user_created:
          description: User that created the panel. Many-to-one to users.
          example: fd066644-c8e5-499d-947b-fe6c6e1a1473
          oneOf:
            - type: string
            - $ref: '#/components/schemas/Users'
      x-collection: directus_panels
    Extensions:
      type: object
      properties:
        enabled:
          description: Whether or not the extension is enabled.
          nullable: false
          type: boolean
        id:
          nullable: false
          description: Unique identifier of the extension.
          type: string
          format: uuid
        bundle:
          description: Name of the bundle the extension is in.
          example: my-bundle
          type: string
          nullable: true
        type:
          description: Type of the extension. One of `'interface'`, `'display'`, `'layout'`, `'module'`, `'panel'`, `'hook'`, `'endpoint'`, `'operation'`, `'bundle'.
          type: string
        local:
          description: Whether the extension exists in the local extensions folder or is loaded from `node_modules`.
          type: boolean
        version:
          description: The currently loaded version of the plugin as defined by its `package.json`.
          type: string
        partial:
          description: |
            Whether or not a bundles entries can be individually disabled. This is applicable to bundle type extensions only.

            ```
              {
                "name": "my-bundle-operation",
                "bundle": "directus-extension-my-bundle",
                "schema": {
                  "type": "operation",
                  "local": true,
                  "version": "1.0.0"
                },
                "meta": {
                  "enabled": true
                }
              }
            ```
          type: boolean
      x-collection: directus_extensions
    Fields:
      type: object
      properties:
        id:
          nullable: false
          type: integer
        collection:
          description: Unique name of the collection this field is in.
          example: about_us
          type: string
        field:
          description: Unique name of the field. Field name is unique within the collection.
          example: id
          type: string
        special:
          nullable: true
          description: Any special transform flags that apply to this field.
          type: array
          items:
            type: string
        interface:
          description: The interface used for this field.
          nullable: true
          type: string
        options:
          type: object
          description: The interface options configured for this field. The structure is based on the interface used.
          nullable: true
        display:
          nullable: true
          description: The display used for this field.
          type: string
        display_options:
          type: string
          description: The configured options for the used display.
          nullable: true
        readonly:
          nullable: false
          description: If the field is considered readonly in the Data Studio.
          type: boolean
        hidden:
          nullable: false
          description: If the field is hidden from the edit page in the Data Studio.
          type: boolean
        sort:
          nullable: true
          description: Where this field is shown on the edit page in the Data Studio.
          type: integer
        width:
          nullable: true
          description: How wide the interface is rendered on the edit page in the Data Studio. One of `half`, `half-left`, `half-right`, `half-space`, `full`, `fill`.
          type: string
        translations:
          nullable: true
          description: How this field's name is displayed in the different languages in the Data Studio.
          type: array
        note:
          nullable: true
          description: Short description displayed in the Data Studio.
          type: string
        required:
          nullable: true
          type: boolean
        group:
          nullable: true
          type: integer
          oneOf:
            - $ref: '#/components/schemas/Fields'
        validation_message:
          nullable: true
          type: string
      x-collection: directus_fields
    Operations:
      type: object
      properties:
        id:
          description: Unique identifier for the operation.
          type: string
          format: uuid
          example: 2f24211d-d928-469a-aea3-3c8f53d4e426
        name:
          description: The name of the operation.
          type: string
          example: Log to Console
        key:
          description: Key for the operation. Must be unique within a given flow.
          type: string
          example: log_console
        type:
          description: Type of operation. One of `log`, `mail`, `notification`, `create`, `read`, `request`, `sleep`, `transform`, `trigger`, `condition`, or any type of custom operation extensions.
          type: string
          example: log
        position_x:
          description: Position of the operation on the X axis within the flow workspace.
          type: integer
          example: 12
        position_y:
          description: Position of the operation on the Y axis within the flow workspace.
          type: integer
          example: 12
        options:
          description: Options depending on the type of the operation.
          type: object
          example: null
          nullable: true
        resolve:
          description: The operation triggered when the current operation succeeds (or `then` logic of a condition operation).
          example: 63716273-0f29-4648-8a2a-2af2948f6f78
          oneOf:
            - type: string
            - $ref: '#/components/schemas/Operations'
        reject:
          description: The operation triggered when the current operation fails (or `otherwise` logic of a condition operation).
          example: 63716273-0f29-4648-8a2a-2af2948f6f78
          oneOf:
            - type: string
            - $ref: '#/components/schemas/Operations'
        flow:
          nullable: false
          type: string
          format: uuid
          oneOf:
            - $ref: '#/components/schemas/Flows'
        date_created:
          description: Timestamp in ISO8601 when the operation was created.
          type: string
          example: '2022-05-11T13:14:52Z'
          format: date-time
          nullable: true
        user_created:
          description: The user who created the operation.
          example: 63716273-0f29-4648-8a2a-2af2948f6f78
          oneOf:
            - type: string
            - $ref: '#/components/schemas/Users'
      x-collection: directus_operations
    Flows:
      type: object
      properties:
        id:
          description: Unique identifier for the flow.
          type: string
          format: uuid
          example: 2f24211d-d928-469a-aea3-3c8f53d4e426
        name:
          description: The name of the flow.
          type: string
          example: Update Articles Flow
        icon:
          description: Icon displayed in the Admin App for the flow.
          type: string
          example: bolt
        color:
          description: Color of the icon displayed in the Admin App for the flow.
          type: string
          example: null
          format: hexcode
          nullable: true
        description:
          nullable: true
          type: string
        status:
          description: Current status of the flow.
          type: string
          example: active
          default: active
          enum:
            - active
            - inactive
        trigger:
          description: Type of trigger for the flow. One of `hook`, `webhook`, `operation`, `schedule`, `manual`.
          type: string
          example: manual
        accountability:
          description: The permission used during the flow. One of `$public`, `$trigger`, `$full`, or UUID of a role.
          type: string
          example: $trigger
        options:
          description: Options of the selected trigger for the flow.
          type: object
          example: null
          nullable: true
        operation:
          description: UUID of the operation connected to the trigger in the flow.
          example: 92e82998-e421-412f-a513-13701e83e4ce
          oneOf:
            - type: string
            - format: uuid
            - $ref: '#/components/schemas/Operations'
        date_created:
          description: Timestamp in ISO8601 when the flow was created.
          type: string
          example: '2022-05-11T13:14:52Z'
          format: date-time
          nullable: true
        user_created:
          description: The user who created the flow.
          example: 63716273-0f29-4648-8a2a-2af2948f6f78
          oneOf:
            - type: string
            - $ref: '#/components/schemas/Users'
        operations:
          nullable: true
          type: array
          items:
            oneOf:
              - type: string
                format: uuid
              - $ref: '#/components/schemas/Operations'
      x-collection: directus_flows
    Notifications:
      type: object
      properties:
        id:
          description: Primary key of the revision.
          example: 2
          type: integer
        timestamp:
          description: Timestamp in ISO8601 when the notification was created.
          example: '2021-11-24T13:57:35Z'
          type: string
          format: date-time
        status:
          description: Current status of the notification. One of "inbox", "archived"
          example: inbox
          type: string
        recipient:
          description: User that received the notification.
          example: 3EE34828-B43C-4FB2-A721-5151579B08EA
          oneOf:
            - type: string
            - $ref: '#/components/schemas/Users'
        sender:
          description: User that sent the notification, if any.
          example: 497a495e-5529-4e46-8feb-2f35e9b85601
          oneOf:
            - type: string
            - $ref: '#/components/schemas/Users'
        subject:
          description: Subject line of the message.
          example: inbox
          type: string
        message:
          description: Subject line of the message.
          example: \nHello admin@example.com,\n\rijk@directus.io has mentioned you in a comment:\n\n> Hello <em>admin@example.com</em>!\n\n<a href=\"http://localhost:8080/admin/content/articles/1\">Click here to view.</a>\n
          type: string
        collection:
          description: Collection this notification references.
          example: articles
          type: string
        item:
          description: Primary key of the item this notification references.
          example: '1'
          type: string
      x-collection: directus_notifications
    Presets:
      type: object
      properties:
        id:
          description: Unique identifier for this single collection preset.
          example: 155
          type: integer
        bookmark:
          description: Name for the bookmark. If this is set, the preset will be considered a bookmark.
          nullable: true
          type: string
        user:
          description: The unique identifier of the user to whom this collection preset applies.
          example: 63716273-0f29-4648-8a2a-2af2948f6f78
          nullable: true
          type: string
          oneOf:
            - $ref: '#/components/schemas/Users'
        role:
          description: The unique identifier of a role in the platform. If `user` is null, this will be used to apply the collection preset or bookmark for all users in the role.
          example: 50419801-0f30-8644-2b3c-9bc2d980d0a0
          nullable: true
          type: string
          oneOf:
            - $ref: '#/components/schemas/Roles'
        collection:
          description: What collection this collection preset is used for.
          example: articles
          oneOf:
            - type: string
            - $ref: '#/components/schemas/Collections'
        search:
          description: Search query.
          type: string
          nullable: true
        layout:
          description: Key of the layout that is used.
          type: string
          example: null
        layout_query:
          description: Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters.
          type: object
          example:
            cards:
              sort: '-published_on'
          nullable: true
        layout_options:
          description: Options of the views. The properties in here are controlled by the layout.
          type: object
          example:
            cards:
              icon: account_circle
              title: '{{ first_name }} {{ last_name }}'
              subtitle: '{{ title }}'
              size: 3
          nullable: true
        filters:
          type: array
          nullable: true
      x-collection: directus_presets
    Relations:
      type: object
      properties:
        id:
          description: Unique identifier for the relation.
          example: 1
          type: integer
        many_collection:
          description: Collection that has the field that holds the foreign key.
          example: directus_activity
          type: string
        many_field:
          description: Foreign key. Field that holds the primary key of the related collection.
          example: user
          type: string
        one_collection:
          description: Collection on the _one_ side of the relationship.
          example: directus_users
          type: string
        one_field:
          description: Alias column that serves as the _one_ side of the relationship.
          example: null
          type: string
          nullable: true
        one_collection_field:
          nullable: true
          type: string
        one_allowed_collections:
          nullable: true
          type: array
          items:
            type: string
        junction_field:
          description: Field on the junction table that holds the many field of the related relation.
          example: null
          type: string
          nullable: true
        sort_field:
          nullable: true
          type: string
        one_deselect_action:
          nullable: false
          type: string
      x-collection: directus_relations
    Diff:
      type: object
      properties:
        hash:
          type: string
        diff:
          type: object
          properties:
            collections:
              type: array
              items:
                type: object
                properties:
                  collection:
                    type: string
                  diff:
                    type: array
                    items:
                      type: object
            fields:
              type: array
              items:
                type: object
                properties:
                  collection:
                    type: string
                  field:
                    type: string
                  diff:
                    type: array
                    items:
                      type: object
            relations:
              type: array
              items:
                type: object
                properties:
                  collection:
                    type: string
                  field:
                    type: string
                  related_collection:
                    type: string
                  diff:
                    type: array
                    items:
                      type: object
    Schema:
      type: object
      properties:
        version:
          type: integer
          example: 1
        directus:
          type: string
        vendor:
          type: string
        collections:
          type: array
          items:
            $ref: '#/components/schemas/Collections'
        fields:
          type: array
          items:
            $ref: '#/components/schemas/Fields'
        relations:
          type: array
          items:
            $ref: '#/components/schemas/Relations'
    Settings:
      type: object
      properties:
        id:
          description: Unique identifier for the setting.
          type: integer
          example: 1
        project_name:
          description: Name of the project, shown in the Data Studio.
          type: string
          example: Directus
        project_url:
          description: The url of the project. Link to the (public) website that goes with this project.
          type: string
          example: null
          nullable: true
        project_color:
          description: The brand color of the project.
          type: string
          format: hexcode
          example: null
          nullable: true
        project_logo:
          description: The logo of the project. Many-to-one to files.
          type: string
          example: null
          nullable: true
          oneOf:
            - $ref: '#/components/schemas/Files'
        public_foreground:
          description: The foreground of the project. Many-to-one to files.
          type: string
          example: null
          nullable: true
          oneOf:
            - $ref: '#/components/schemas/Files'
        public_background:
          description: The background of the project. Many-to-one to files.
          type: object
          example: null
          nullable: true
          oneOf:
            - $ref: '#/components/schemas/Files'
        public_note:
          description: Note rendered on the public pages of the app.
          type: string
          example: null
          nullable: true
        auth_login_attempts:
          description: Allowed authentication login attempts before the user's status is set to blocked.
          type: integer
          example: 25
        auth_password_policy:
          description: Authentication password policy. What regex passwords must pass in order to be valid.
          type: string
          format: regex
          nullable: true
        storage_asset_transform:
          description: If the transform endpoints are allowed to be used on the assets endpoint. One of all, none or presets.
          type: string
          enum:
            - all
            - none
            - presets
          example: all
          nullable: true
        storage_asset_presets:
          description: What preset keys exist in the assets endpoint.
          type: array
          items:
            type: object
            properties:
              key:
                description: Key for the asset. Used in the assets endpoint.
                type: string
              fit:
                description: Whether to crop the thumbnail to match the size, or maintain the aspect ratio.
                type: string
                enum:
                  - cover
                  - contain
                  - inside
                  - outside
              width:
                description: Width of the thumbnail.
                type: integer
              height:
                description: Height of the thumbnail.
                type: integer
              withoutEnlargement:
                description: No image upscale
                type: boolean
              quality:
                description: Quality of the compression used.
                type: integer
              format:
                description: Reformat output image
                type: string
                enum:
                  - jpeg
                  - png
                  - webp
                  - tiff
                  - avif
              transforms:
                description: Additional transformations to apply
                type: array
                nullable: true
                items:
                  type: object
                  properties:
                    method:
                      description: The Sharp method name
                      type: string
                    arguments:
                      description: A list of arguments to pass to the Sharp method
                      type: array
                      nullable: true
                      items:
                        type: object
                        properties:
                          argument:
                            description: A JSON representation of the argument value
                            type: string
          example: null
          nullable: true
        custom_css:
          description: CSS rules to override the App's default styling.
          nullable: true
          type: string
        storage_default_folder:
          description: Folder for uploaded files. Does not affect existing files.
          type: string
          format: uuid
        basemaps:
          description: Custom tiles to overriding the Mapbox defaults.
          type: array
          nullable: true
        mapbox_key:
          description: Mapbox Access Token.
          nullable: true
          type: string
        module_bar:
          description: What modules are enabled/added globally.
          type: array
          nullable: true
        project_descriptor:
          description: Descriptor of the project, shown in the Data Studio.
          nullable: true
          type: string
        custom_aspect_ratios:
          description: Custom aspect ratios in the image editor.
          type: array
          nullable: true
        public_favicon:
          nullable: true
          description: Favicon for the Data Studio. Many-to-one to files.
          type: string
          oneOf:
            - $ref: '#/components/schemas/Files'
        default_appearance:
          description: One of auto, light, dark.
          nullable: false
          type: string
          enum:
            - auto
            - light
            - dark
        default_theme_light:
          description: Default theme to use in light mode.
          nullable: true
          type: string
        theme_light_overrides:
          description: Default customization for light theme in use.
          type: object
          nullable: true
        default_theme_dark:
          description: Default theme to use in dark mode.
          nullable: true
          type: string
        theme_dark_overrides:
          description: Default customization for dark theme in use.
          type: object
          nullable: true
        report_error_url:
          description: |
            Link to the error report page. This is a template URL that has access to the following object

            ```
              {
                error: {
                  name?: string;
                  message?: string;
                };
                route: {
                  fullPath: string;
                  hash: string;
                  name: string;
                  path: string;
                  query: string;
                };
                navigator: {
                  language: string;
                  userAgent: string;
                };
                user: {
                  id?: string | number;
                  first_name?: string;
                  last_name?: string;
                  title?: string;
                  description?: string;
                  location?: string;
                  status?: string;
                };
                role: {
                  id?: string;
                  name?: string;
                };
              }
            ```
          nullable: true
          type: string
        report_bug_url:
          description: Link to the bug report page.
          nullable: true
          type: string
        report_feature_url:
          description: Link to the feature request page.
          nullable: true
          type: string
      x-collection: directus_settings
    Shares:
      type: object
      properties:
        id:
          description: Primary key of the share;
          example: 3a606c3e-9d4d-4556-b7bb-f00860613da3
          type: string
          format: uuid
        name:
          description: Custom (optional) name for the share.
          example: My Share
          type: string
        collection:
          description: Collection in which the current item is shared. Many-to-one to Collections.
          example: articles
          type: string
          oneOf:
            - $ref: '#/components/schemas/Collections'
        item:
          description: Primary key of the item that's shared.
          example: '1'
          type: string
        role:
          description: Role of which the share will inherit the permissions. Many-to-one to shares.
          example: 2b34fba4-a6cb-49f4-a070-2daee7ac44f0
          type: string
          format: uuid
          oneOf:
            - $ref: '#/components/schemas/Shares'
        password:
          description: Optional password that's required to view this shared item.
          example: '**********'
          type: string
          format: hash
        user_created:
          description: Reference to the user who created this share. Many-to-one to Users.
          example: b13072b7-73e9-4904-89e0-34aaf4403766
          type: string
          format: uuid
          oneOf:
            - $ref: '#/components/schemas/Users'
        date_created:
          description: When the share was created.
          example: '2023-01-25T19:16:49.009Z'
          type: string
          format: date-time
        date_start:
          description: Optional timestamp that controls from what date/time the shared item can be viewed.
          example: '2023-01-26T17:00:00.000Z'
          type: string
          format: date-time
        date_end:
          description: Optional timestamp that controls until what date/time the shared item can be viewed.
          example: '2023-01-28T17:00:00.000Z'
          type: string
          format: date-time
        times_used:
          description: The number of times the shared item has been viewed.
          example: 0
          type: integer
        max_uses:
          description: The maximum number of times the shared item can be viewed.
          example: 15
          type: integer
      x-collection: directus_shares
    Translations:
      type: object
      properties:
        id:
          description: Primary key of the translations.
          example: sc4346aa4-81a8-4885-b3a8-f647e4f6f769
          type: string
          format: uuid
        key:
          description: The translation key.
          example: Test
          type: string
        language:
          description: The language of the translation.
          example: en-US
          type: string
        string:
          description: The translation value.
          example: Test
          type: string
      x-collection: directus_translations
    Query:
      type: object
      properties:
        fields:
          type: array
          items:
            type: string
          description: Control what fields are being returned in the object.
          example:
            - '*'
            - '*.*'
        filter:
          type: object
          example:
            <field>:
              <operator>: <value>
        search:
          description: Filter by items that contain the given search query in one of their fields.
          type: string
        sort:
          type: array
          items:
            type: string
          description: How to sort the returned items.
          example:
            - '-date_created'
        limit:
          type: number
          description: Set the maximum number of items that will be returned
        offset:
          type: number
          description: How many items to skip when fetching data.
        page:
          type: number
          description: Cursor for use in pagination. Often used in combination with limit.
        deep:
          type: object
          description: Deep allows you to set any of the other query parameters on a nested relational dataset.
          example:
            related_articles:
              _limit: 3
